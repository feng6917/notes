//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_de "golang/freetype/truetype";_d "lgo/unipdf/core";_cb "lgo/unipdf/internal/textencoding";_gea "lgo/unipdf/internal/transform";_eb "lgo/unipdf/model";
_e "golang.org/x/image/font";_ge "image";_f "image/color";);func (_gebb *TextFont )CharcodeToRunes (charcode _cb .CharCode )(_cb .CharCode ,[]rune ){_bad :=[]_cb .CharCode {charcode };if _gebb ._bag ==nil ||_gebb ._bag ==_gebb .Font {if _gebb .Font .IsSimple ()&&_gebb ._gd !=nil {if _bg :=_gebb ._gd .Index (rune (charcode ));
_bg > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_gebb .Font .CharcodesToUnicode (_bad );};_bba :=_gebb ._bag .CharcodesToUnicode (_bad );_fae ,_ :=_gebb .Font .RunesToCharcodeBytes (_bba );_bfe :=_gebb .Font .BytesToCharcodes (_fae );
_cacg :=charcode ;if len (_bfe )> 0&&_bfe [0]!=0{_cacg =_bfe [0];};return _cacg ,_bba ;};type TextRenderingMode int ;func (_defa *TextState )ProcTf (font *TextFont ){_defa .Tf =font };func (_dc *TextState )ProcTStar (){_dc .ProcTd (0,-_dc .Tl )};const (TextRenderingModeFill TextRenderingMode =iota ;
TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;
Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _gea .Matrix ;Tlm _gea .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type LineJoin int ;type TextFont struct{Font *_eb .PdfFont ;Size float64 ;_gd *_de .Font ;_bag *_eb .PdfFont ;};func (_gbf *TextState )Translate (tx ,ty float64 ){_gbf .Tm =_gbf .Tm .Mult (_gea .TranslationMatrix (tx ,ty ));
};func (_degg *TextState )ProcTd (tx ,ty float64 ){_degg .Tlm .Concat (_gea .TranslationMatrix (tx ,ty ));_degg .Tm =_degg .Tlm .Clone ();};type Pattern interface{ColorAt (_gg ,_ca int )_f .Color ;};func (_bcc *TextFont )NewFace (size float64 )_e .Face {return _de .NewFace (_bcc ._gd ,&_de .Options {Size :size });
};func NewTextFont (font *_eb .PdfFont ,size float64 )(*TextFont ,error ){_beg :=font .FontDescriptor ();if _beg ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_ccg ,_fag :=_d .GetStream (_beg .FontFile2 );if !_fag {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_bb ,_gag :=_d .DecodeStream (_ccg );
if _gag !=nil {return nil ,_gag ;};_acc ,_gag :=_de .Parse (_bb );if _gag !=nil {return nil ,_gag ;};return &TextFont {Font :font ,Size :size ,_gd :_acc },nil ;};type LineCap int ;const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_aba ,_bbf :=_eb .NewPdfFontFromTTFFile (filePath );
if _bbf !=nil {return nil ,_bbf ;};return NewTextFont (_aba ,size );};func (_aeb *TextState )ProcQ (data []byte ,ctx Context ){_aeb .ProcTStar ();_aeb .ProcTj (data ,ctx )};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_fe *TextState )Reset (){_fe .Tm =_gea .IdentityMatrix ();
_fe .Tlm =_gea .IdentityMatrix ()};type FillRule int ;func (_badd *TextState )ProcTj (data []byte ,ctx Context ){_fga :=_badd .Tf .Size ;_cfe :=_badd .Th /100.0;_gbe :=_badd .GlobalScale ;_cacb :=_gea .NewMatrix (_fga *_cfe ,0,0,_fga ,0,_badd .Ts );_dcf :=ctx .Matrix ();
_fagd :=_dcf .Clone ().Mult (_badd .Tm .Clone ().Mult (_cacb )).ScalingFactorY ();_ec :=_badd .Tf .NewFace (_fagd );_afde :=_badd .Tf .BytesToCharcodes (data );for _ ,_fbg :=range _afde {_aad ,_dbg :=_badd .Tf .CharcodeToRunes (_fbg );_faa :=string (_dbg );
if _faa =="\u0000"{continue ;};_dbf :=_dcf .Clone ().Mult (_badd .Tm .Clone ().Mult (_cacb ));_gde :=_dbf .ScalingFactorY ();_dbf =_dbf .Scale (1/_gde ,-1/_gde );if _badd .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_dbf );ctx .DrawString (_faa ,_ec ,0,0);
ctx .SetMatrix (_dcf );};_gefg :=0.0;if _faa =="\u0020"{_gefg =_badd .Tw ;};_fdc ,_ ,_ecg :=_badd .Tf .GetCharMetrics (_aad );if _ecg {_fdc =_fdc *0.001*_fga ;}else {_fdc ,_ =ctx .MeasureString (_faa ,_ec );_fdc =_fdc /_gbe ;};_ebfb :=(_fdc +_badd .Tc +_gefg )*_cfe ;
_badd .Tm =_badd .Tm .Mult (_gea .TranslationMatrix (_ebfb ,0));};};func (_cdg *TextFont )WithSize (size float64 ,originalFont *_eb .PdfFont )*TextFont {return &TextFont {Font :_cdg .Font ,Size :size ,_gd :_cdg ._gd ,_bag :originalFont };};const (LineJoinRound LineJoin =iota ;
LineJoinBevel ;);func (_gab *TextState )ProcTD (tx ,ty float64 ){_gab .Tl =-ty ;_gab .ProcTd (tx ,ty )};func (_cde *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cde .Tm =_gea .NewMatrix (a ,b ,c ,d ,e ,f );_cde .Tlm =_cde .Tm .Clone ();};func (_aee *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_aee .Tw =aw ;
_aee .Tc =ac ;_aee .ProcQ (data ,ctx );};func (_fg *TextFont )GetCharMetrics (code _cb .CharCode )(float64 ,float64 ,bool ){if _aea ,_gb :=_fg .Font .GetCharMetrics (code );_gb &&_aea .Wx !=0{return _aea .Wx ,_aea .Wy ,_gb ;};if _fg ._bag ==nil {return 0,0,false ;
};_bbe ,_bbg :=_fg ._bag .GetCharMetrics (code );return _bbe .Wx ,_bbe .Wy ,_bbg &&_bbe .Wx !=0;};type Gradient interface{Pattern ;AddColorStop (_dg float64 ,_a _f .Color );};func (_da *TextFont )BytesToCharcodes (data []byte )[]_cb .CharCode {if _da ._bag !=nil {return _da ._bag .BytesToCharcodes (data );
};return _da .Font .BytesToCharcodes (data );};type Context interface{Push ();Pop ();Matrix ()_gea .Matrix ;SetMatrix (_db _gea .Matrix );Translate (_ef ,_dgg float64 );Scale (_cag ,_deb float64 );Rotate (_efb float64 );MoveTo (_efg ,_ab float64 );LineTo (_b ,_fa float64 );
CubicTo (_ac ,_bd ,_aa ,_fb ,_ff ,_bdc float64 );QuadraticTo (_def ,_abg ,_be ,_cd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_af float64 );SetLineCap (_fbd LineCap );SetLineJoin (_ag LineJoin );
SetDash (_bc ...float64 );SetDashOffset (_aff float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cbg ,_bcg ,_geb ,_cbgd float64 );SetFillRGBA (_ee ,_dga ,_afd ,_ebf float64 );SetFillStyle (_gef Pattern );SetFillRule (_ba FillRule );
SetStrokeRGBA (_ffc ,_cab ,_bde ,_bf float64 );SetStrokeStyle (_fba Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ga string ,_fd _e .Face ,_cbc ,_ded float64 );MeasureString (_cae string ,_cg _e .Face )(_cc ,_ce float64 );
DrawRectangle (_ebfd ,_dgge ,_caea ,_efa float64 );DrawImage (_ggb _ge .Image ,_cf ,_ae int );DrawImageAnchored (_cac _ge .Image ,_bfb ,_cba int ,_afe ,_deg float64 );Height ()int ;Width ()int ;};func NewTextState ()TextState {return TextState {Th :100,Tm :_gea .IdentityMatrix (),Tlm :_gea .IdentityMatrix ()};
};