//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_a "lgo/unipdf/common";_gd "lgo/unipdf/contentstream";_b "lgo/unipdf/contentstream/draw";_g "lgo/unipdf/core";_f "lgo/unipdf/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_f .PdfPage )error {_aa ,_fa :=page .GetMediaBox ();if _fa !=nil {return _fa ;};_ad ,_fa :=page .GetRotate ();if _fa !=nil {_a .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_fa .Error ());
};_c :=_ad %360!=0&&_ad %90==0;_aa .Normalize ();_af ,_fd ,_gf ,_cf :=_aa .Llx ,_aa .Lly ,_aa .Width (),_aa .Height ();_da :=_af !=0||_fd !=0;if !_c &&!_da {return nil ;};_ce :=func (_bf ,_bg ,_ac float64 )_b .BoundingBox {return _b .Path {Points :[]_b .Point {_b .NewPoint (0,0).Rotate (_ac ),_b .NewPoint (_bf ,0).Rotate (_ac ),_b .NewPoint (0,_bg ).Rotate (_ac ),_b .NewPoint (_bf ,_bg ).Rotate (_ac )}}.GetBoundingBox ();
};_bd :=_gd .NewContentCreator ();var _ab float64 ;if _c {_ab =-float64 (_ad );_fe :=_ce (_gf ,_cf ,_ab );_bd .Translate ((_fe .Width -_gf )/2+_gf /2,(_fe .Height -_cf )/2+_cf /2);_bd .RotateDeg (_ab );_bd .Translate (-_gf /2,-_cf /2);_gf ,_cf =_fe .Width ,_fe .Height ;
};if _da {_bd .Translate (-_af ,-_fd );};_e :=_bd .Operations ();_gc ,_fa :=_g .MakeStream (_e .Bytes (),_g .NewFlateEncoder ());if _fa !=nil {return _fa ;};_dc :=_g .MakeArray (_gc );_dc .Append (page .GetContentStreamObjs ()...);*_aa =_f .PdfRectangle {Urx :_gf ,Ury :_cf };
if _abf :=page .CropBox ;_abf !=nil {_abf .Normalize ();_ef ,_gdb ,_fg ,_cfc :=_abf .Llx -_af ,_abf .Lly -_fd ,_abf .Width (),_abf .Height ();if _c {_ae :=_ce (_fg ,_cfc ,_ab );_fg ,_cfc =_ae .Width ,_ae .Height ;};*_abf =_f .PdfRectangle {Llx :_ef ,Lly :_gdb ,Urx :_ef +_fg ,Ury :_gdb +_cfc };
};_a .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ab ,_e ,_aa );page .Contents =_dc ;page .Rotate =nil ;
return nil ;};