//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_b "bufio";_fb "bytes";_ad "encoding/hex";_c "errors";_d "fmt";_g "lgo/unipdf/common";_eb "lgo/unipdf/core";_cee "lgo/unipdf/internal/cmap/bcmaps";_ae "io";_fc "sort";_f "strconv";
_ce "strings";_e "unicode/utf16";);func (cmap *CMap )Name ()string {return cmap ._cb };func _gccf ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};type CMap struct{*cMapParser ;_cb string ;_gf int ;_fa int ;_bc string ;_ed string ;_fcf CIDSystemInfo ;
_cc []Codespace ;_ga map[CharCode ]CharCode ;_dgg map[CharCode ]CharCode ;_fd map[CharCode ]string ;_ef map[string ]CharCode ;_ced []byte ;_aae *_eb .PdfObjectStream ;_bg integer ;};func (cmap *CMap )parseName ()error {_fef :="";_dcfg :=false ;for _feg :=0;
_feg < 20&&!_dcfg ;_feg ++{_dbg ,_bgfa :=cmap .parseObject ();if _bgfa !=nil {return _bgfa ;};switch _bcee :=_dbg .(type ){case cmapOperand :switch _bcee .Operand {case "\u0064\u0065\u0066":_dcfg =true ;default:_g .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_dbg ,_fef );
if _fef !=""{_fef =_d .Sprintf ("\u0025\u0073\u0020%\u0073",_fef ,_bcee .Operand );};_g .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_fef );
};case cmapName :_fef =_bcee .Name ;};};if !_dcfg {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cb =_fef ;return nil ;};type Codespace struct{NumBytes int ;
Low CharCode ;High CharCode ;};func (_dcfe *cMapParser )parseNumber ()(cmapObject ,error ){_gee ,_deedf :=_eb .ParseNumber (_dcfe ._abfb );if _deedf !=nil {return nil ,_deedf ;};switch _fgg :=_gee .(type ){case *_eb .PdfObjectFloat :return cmapFloat {float64 (*_fgg )},nil ;
case *_eb .PdfObjectInteger :return cmapInt {int64 (*_fgg )},nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gee );};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._fcf };
type charRange struct{_cf CharCode ;_gc CharCode ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _cda ,_dcf :=cmap ._fd [code ];_dcf {return _cda ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._bg ._aafc ,cmap ._bg ._bfbe };
func NewCIDSystemInfo (obj _eb .PdfObject )(_cg CIDSystemInfo ,_bf error ){_fg ,_dg :=_eb .GetDict (obj );if !_dg {return CIDSystemInfo {},_eb .ErrTypeError ;};_be ,_dg :=_eb .GetStringVal (_fg .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_dg {return CIDSystemInfo {},_eb .ErrTypeError ;};_ge ,_dg :=_eb .GetStringVal (_fg .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_dg {return CIDSystemInfo {},_eb .ErrTypeError ;};_aa ,_dg :=_eb .GetIntVal (_fg .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_dg {return CIDSystemInfo {},_eb .ErrTypeError ;};return CIDSystemInfo {Registry :_be ,Ordering :_ge ,Supplement :_aa },nil ;};func _ec (_ac string )(*CMap ,error ){_aef ,_cgf :=_cee .Asset (_ac );if _cgf !=nil {return nil ,_cgf ;};return LoadCmapFromDataCID (_aef );
};func (cmap *CMap )inCodespace (_cbg CharCode ,_gcbf int )bool {for _ ,_gdd :=range cmap ._cc {if _gdd .Low <=_cbg &&_cbg <=_gdd .High &&_gcbf ==_gdd .NumBytes {return true ;};};return false ;};func IsPredefinedCMap (name string )bool {return _cee .AssetExists (name )};
func _ddb (_ddc bool )*CMap {_ceg :=16;if _ddc {_ceg =8;};return &CMap {_gf :_ceg ,_ga :make (map[CharCode ]CharCode ),_dgg :make (map[CharCode ]CharCode ),_fd :make (map[CharCode ]string ),_ef :make (map[string ]CharCode )};};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func _eedf (_bgfae cmapHexString )[]rune {if len (_bgfae ._effb )==1{return []rune {rune (_bgfae ._effb [0])};};_gdbf :=_bgfae ._effb ;if len (_gdbf )%2!=0{_gdbf =append (_gdbf ,0);_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bgfae ,_gdbf );
};_cbd :=len (_gdbf )>>1;_cca :=make ([]uint16 ,_cbd );for _abbb :=0;_abbb < _cbd ;_abbb ++{_cca [_abbb ]=uint16 (_gdbf [_abbb <<1])<<8+uint16 (_gdbf [_abbb <<1+1]);};_ffdf :=_e .Decode (_cca );return _ffdf ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_dde ,_bgg :=cmap .BytesToCharcodes (data );
if !_bgg {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_gcc :=make ([]string ,len (_dde ));var _efa []CharCode ;for _dee ,_eg :=range _dde {_dbc ,_beg :=cmap ._fd [_eg ];if !_beg {_efa =append (_efa ,_eg );_dbc =MissingCodeString ;};_gcc [_dee ]=_dbc ;};_fbd :=_ce .Join (_gcc ,"");if len (_efa )> 0{_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_dde ,len (_efa ),_efa ,_fbd ,cmap );
};return _fbd ,len (_efa );};func (cmap *CMap )toBfData ()string {if len (cmap ._fd )==0{return "";};_cdb :=make ([]CharCode ,0,len (cmap ._fd ));for _ddbe :=range cmap ._fd {_cdb =append (_cdb ,_ddbe );};_fc .Slice (_cdb ,func (_edaf ,_aed int )bool {return _cdb [_edaf ]< _cdb [_aed ]});
var _dfb []charRange ;_beec :=charRange {_cdb [0],_cdb [0]};_ged :=cmap ._fd [_cdb [0]];for _ ,_dcfc :=range _cdb [1:]{_bge :=cmap ._fd [_dcfc ];if _dcfc ==_beec ._gc +1&&_bba (_bge )==_bba (_ged )+1{_beec ._gc =_dcfc ;}else {_dfb =append (_dfb ,_beec );
_beec ._cf ,_beec ._gc =_dcfc ,_dcfc ;};_ged =_bge ;};_dfb =append (_dfb ,_beec );var _gfe []CharCode ;var _gddc []fbRange ;for _ ,_ccde :=range _dfb {if _ccde ._cf ==_ccde ._gc {_gfe =append (_gfe ,_ccde ._cf );}else {_gddc =append (_gddc ,fbRange {_dd :_ccde ._cf ,_ff :_ccde ._gc ,_cd :cmap ._fd [_ccde ._cf ]});
};};_g .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dfb ),len (_gfe ),len (_gddc ));var _dcbe []string ;if len (_gfe )> 0{_cbe :=(len (_gfe )+_bedcb -1)/_bedcb ;
for _eae :=0;_eae < _cbe ;_eae ++{_abf :=_efcd (len (_gfe )-_eae *_bedcb ,_bedcb );_dcbe =append (_dcbe ,_d .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_abf ));for _dce :=0;_dce < _abf ;_dce ++{_bedc :=_gfe [_eae *_bedcb +_dce ];
_fac :=cmap ._fd [_bedc ];_dcbe =append (_dcbe ,_d .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_bedc ,_fbfc (_fac )));};_dcbe =append (_dcbe ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_gddc )> 0{_beb :=(len (_gddc )+_bedcb -1)/_bedcb ;
for _dda :=0;_dda < _beb ;_dda ++{_gccg :=_efcd (len (_gddc )-_dda *_bedcb ,_bedcb );_dcbe =append (_dcbe ,_d .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gccg ));for _aba :=0;_aba < _gccg ;_aba ++{_dfg :=_gddc [_dda *_bedcb +_aba ];
_dcbe =append (_dcbe ,_d .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_dfg ._dd ,_dfg ._ff ,_fbfc (_dfg ._cd )));};_dcbe =append (_dcbe ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};
return _ce .Join (_dcbe ,"\u000a");};const (_ea =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type cmapObject interface{};func (cmap *CMap )Type ()int {return cmap ._fa };func (_gac *cMapParser )parseOperand ()(cmapOperand ,error ){_efb :=cmapOperand {};
_cecf :=_fb .Buffer {};for {_ccfc ,_fdea :=_gac ._abfb .Peek (1);if _fdea !=nil {if _fdea ==_ae .EOF {break ;};return _efb ,_fdea ;};if _eb .IsDelimiter (_ccfc [0]){break ;};if _eb .IsWhiteSpace (_ccfc [0]){break ;};_ddbfg ,_ :=_gac ._abfb .ReadByte ();
_cecf .WriteByte (_ddbfg );};if _cecf .Len ()==0{return _efb ,_d .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_efb .Operand =_cecf .String ();return _efb ,nil ;
};func (_cdab *cMapParser )skipSpaces ()(int ,error ){_cfc :=0;for {_gbg ,_fbe :=_cdab ._abfb .Peek (1);if _fbe !=nil {return 0,_fbe ;};if _eb .IsWhiteSpace (_gbg [0]){_cdab ._abfb .ReadByte ();_cfc ++;}else {break ;};};return _cfc ,nil ;};type cmapString struct{String string ;
};type fbRange struct{_dd CharCode ;_ff CharCode ;_cd string ;};func (cmap *CMap )parseCodespaceRange ()error {for {_cbeb ,_bbga :=cmap .parseObject ();if _bbga !=nil {if _bbga ==_ae .EOF {break ;};return _bbga ;};_fbc ,_gddf :=_cbeb .(cmapHexString );
if !_gddf {if _fde ,_ggfa :=_cbeb .(cmapOperand );_ggfa {if _fde .Operand ==_eff {return nil ;};return _c .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_cbeb ,_bbga =cmap .parseObject ();if _bbga !=nil {if _bbga ==_ae .EOF {break ;
};return _bbga ;};_egd ,_gddf :=_cbeb .(cmapHexString );if !_gddf {return _c .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fbc ._effb )!=len (_egd ._effb ){return _c .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_bda :=_bbag (_fbc );_fad :=_bbag (_egd );if _fad < _bda {_g .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_bda ,_fad );
return ErrBadCMap ;};_eed :=_egd ._effg ;_abc :=Codespace {NumBytes :_eed ,Low :_bda ,High :_fad };cmap ._cc =append (cmap ._cc ,_abc );_g .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_bda ,_fad );
};if len (cmap ._cc )==0{_g .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )parseWMode ()error {var _gge int ;
_edac :=false ;for _dca :=0;_dca < 3&&!_edac ;_dca ++{_fea ,_abe :=cmap .parseObject ();if _abe !=nil {return _abe ;};switch _ggd :=_fea .(type ){case cmapOperand :switch _ggd .Operand {case "\u0064\u0065\u0066":_edac =true ;default:_g .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_fea );
return ErrBadCMap ;};case cmapInt :_gge =int (_ggd ._fcgd );};};cmap ._bg =integer {_bfbe :true ,_aafc :_gge };return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bbd []CharCode ;if cmap ._gf ==8{for _ ,_agd :=range data {_bbd =append (_bbd ,CharCode (_agd ));
};return _bbd ,true ;};for _bed :=0;_bed < len (data );{_ccc ,_gfc ,_aab :=cmap .matchCode (data [_bed :]);if !_aab {_g .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_bed ,data ,string (data ));
return _bbd ,false ;};_bbd =append (_bbd ,_ccc );_bed +=_gfc ;};return _bbd ,true ;};func (_bcd *cMapParser )parseName ()(cmapName ,error ){_cbed :="";_gag :=false ;for {_eedd ,_bdge :=_bcd ._abfb .Peek (1);if _bdge ==_ae .EOF {break ;};if _bdge !=nil {return cmapName {_cbed },_bdge ;
};if !_gag {if _eedd [0]=='/'{_gag =true ;_bcd ._abfb .ReadByte ();}else {_g .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_eedd ,_eedd );
return cmapName {_cbed },_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_eedd [0]);};}else {if _eb .IsWhiteSpace (_eedd [0]){break ;}else if (_eedd [0]=='/')||(_eedd [0]=='[')||(_eedd [0]=='(')||(_eedd [0]==']')||(_eedd [0]=='<')||(_eedd [0]=='>'){break ;
}else if _eedd [0]=='#'{_dabb ,_eaaac :=_bcd ._abfb .Peek (3);if _eaaac !=nil {return cmapName {_cbed },_eaaac ;};_bcd ._abfb .Discard (3);_ggfd ,_eaaac :=_ad .DecodeString (string (_dabb [1:3]));if _eaaac !=nil {return cmapName {_cbed },_eaaac ;};_cbed +=string (_ggfd );
}else {_aac ,_ :=_bcd ._abfb .ReadByte ();_cbed +=string (_aac );};};};return cmapName {_cbed },nil ;};func _efcd (_gad ,_gdgg int )int {if _gad < _gdgg {return _gad ;};return _gdgg ;};type cmapHexString struct{_effg int ;_effb []byte ;};func _bbag (_edfd cmapHexString )CharCode {_bgee :=CharCode (0);
for _ ,_fgfd :=range _edfd ._effb {_bgee <<=8;_bgee |=CharCode (_fgfd );};return _bgee ;};const (_bedcb =100;_afc ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_geda ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (_feca *cMapParser )parseString ()(cmapString ,error ){_feca ._abfb .ReadByte ();_bdcb :=_fb .Buffer {};_cada :=1;for {_bdb ,_cef :=_feca ._abfb .Peek (1);if _cef !=nil {return cmapString {_bdcb .String ()},_cef ;};if _bdb [0]=='\\'{_feca ._abfb .ReadByte ();
_fdg ,_gda :=_feca ._abfb .ReadByte ();if _gda !=nil {return cmapString {_bdcb .String ()},_gda ;};if _eb .IsOctalDigit (_fdg ){_bfae ,_edfb :=_feca ._abfb .Peek (2);if _edfb !=nil {return cmapString {_bdcb .String ()},_edfb ;};var _bea []byte ;_bea =append (_bea ,_fdg );
for _ ,_edcd :=range _bfae {if _eb .IsOctalDigit (_edcd ){_bea =append (_bea ,_edcd );}else {break ;};};_feca ._abfb .Discard (len (_bea )-1);_g .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bea );
_dfde ,_edfb :=_f .ParseUint (string (_bea ),8,32);if _edfb !=nil {return cmapString {_bdcb .String ()},_edfb ;};_bdcb .WriteByte (byte (_dfde ));continue ;};switch _fdg {case 'n':_bdcb .WriteByte ('\n');case 'r':_bdcb .WriteByte ('\r');case 't':_bdcb .WriteByte ('\t');
case 'b':_bdcb .WriteByte ('\b');case 'f':_bdcb .WriteByte ('\f');case '(':_bdcb .WriteByte ('(');case ')':_bdcb .WriteByte (')');case '\\':_bdcb .WriteByte ('\\');};continue ;}else if _bdb [0]=='('{_cada ++;}else if _bdb [0]==')'{_cada --;if _cada ==0{_feca ._abfb .ReadByte ();
break ;};};_gcag ,_ :=_feca ._abfb .ReadByte ();_bdcb .WriteByte (_gcag );};return cmapString {_bdcb .String ()},nil ;};func (cmap *CMap )String ()string {_ba :=cmap ._fcf ;_deg :=[]string {_d .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._gf ),_d .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fa )};
if cmap ._bc !=""{_deg =append (_deg ,_d .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._bc ));};if cmap ._ed !=""{_deg =append (_deg ,_d .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ed ));
};_deg =append (_deg ,_d .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ba .String ()));if len (cmap ._cc )> 0{_deg =append (_deg ,_d .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cc )));
};if len (cmap ._fd )> 0{_deg =append (_deg ,_d .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._fd )));};return _d .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cb ,_ce .Join (_deg ,"\u0020"));
};var (ErrBadCMap =_c .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_c .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (cmap *CMap )parseSystemInfo ()error {_ccb :=false ;_eca :=false ;_dcfa :="";_gcef :=false ;_gefb :=CIDSystemInfo {};for _gdb :=0;_gdb < 50&&!_gcef ;_gdb ++{_bde ,_edf :=cmap .parseObject ();if _edf !=nil {return _edf ;};switch _dcc :=_bde .(type ){case cmapDict :_cff :=_dcc .Dict ;
_acg ,_dec :=_cff ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cbc ,_dec :=_acg .(cmapString );
if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gefb .Registry =_cbc .String ;_acg ,_dec =_cff ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cbc ,_dec =_acg .(cmapString );if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_gefb .Ordering =_cbc .String ;_gfb ,_dec :=_cff ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cfgf ,_dec :=_gfb .(cmapInt );if !_dec {_g .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gefb .Supplement =int (_cfgf ._fcgd );
_gcef =true ;case cmapOperand :switch _dcc .Operand {case "\u0062\u0065\u0067i\u006e":_ccb =true ;case "\u0065\u006e\u0064":_gcef =true ;case "\u0064\u0065\u0066":_eca =false ;};case cmapName :if _ccb {_dcfa =_dcc .Name ;_eca =true ;};case cmapString :if _eca {switch _dcfa {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_gefb .Registry =_dcc .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_gefb .Ordering =_dcc .String ;};};case cmapInt :if _eca {switch _dcfa {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_gefb .Supplement =int (_dcc ._fcgd );};};};};if !_gcef {_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fcf =_gefb ;return nil ;};func (_gaa *cMapParser )parseHexString ()(cmapHexString ,error ){_gaa ._abfb .ReadByte ();_aec :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_fdd :=_fb .Buffer {};for {_gaa .skipSpaces ();_ccf ,_gddfd :=_gaa ._abfb .Peek (1);if _gddfd !=nil {return cmapHexString {},_gddfd ;};if _ccf [0]=='>'{_gaa ._abfb .ReadByte ();break ;};_fed ,_ :=_gaa ._abfb .ReadByte ();if _fb .IndexByte (_aec ,_fed )>=0{_fdd .WriteByte (_fed );
};};if _fdd .Len ()%2==1{_g .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fdd .String ());_fdd .WriteByte ('0');};_afa :=_fdd .Len ()/2;
_bbfb ,_ :=_ad .DecodeString (_fdd .String ());return cmapHexString {_effg :_afa ,_effb :_bbfb },nil ;};func (cmap *CMap )parseCIDRange ()error {for {_dab ,_afcg :=cmap .parseObject ();if _afcg !=nil {if _afcg ==_ae .EOF {break ;};return _afcg ;};_egdc ,_ddf :=_dab .(cmapHexString );
if !_ddf {if _ebg ,_edd :=_dab .(cmapOperand );_edd {if _ebg .Operand ==_acd {return nil ;};return _c .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_ccda :=_bbag (_egdc );_dab ,_afcg =cmap .parseObject ();if _afcg !=nil {if _afcg ==_ae .EOF {break ;};return _afcg ;};_bad ,_ddf :=_dab .(cmapHexString );if !_ddf {return _c .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_egdc ._effb )!=len (_bad ._effb ){return _c .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_fccb :=_bbag (_bad );
if _ccda > _fccb {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_ccda ,_fccb );
return ErrBadCMap ;};_dab ,_afcg =cmap .parseObject ();if _afcg !=nil {if _afcg ==_ae .EOF {break ;};return _afcg ;};_bfg ,_ddf :=_dab .(cmapInt );if !_ddf {return _c .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bfg ._fcgd < 0{return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_ggc :=_bfg ._fcgd ;for _bdc :=_ccda ;_bdc <=_fccb ;_bdc ++{cmap ._ga [_bdc ]=CharCode (_ggc );
_ggc ++;};_g .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_ccda ,_fccb ,_bfg ._fcgd );};return nil ;};type cmapArray struct{Array []cmapObject ;
};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gg ,_abb :=cmap ._ga [code ];return _gg ,_abb ;};type integer struct{_bfbe bool ;_aafc int ;};func _fbfc (_fff string )string {_dfe :=[]rune (_fff );_faa :=make ([]string ,len (_dfe ));
for _aeac ,_edc :=range _dfe {_faa [_aeac ]=_d .Sprintf ("\u0025\u0030\u0034\u0078",_edc );};return _d .Sprintf ("\u003c\u0025\u0073\u003e",_ce .Join (_faa ,""));};func (cmap *CMap )computeInverseMappings (){for _ffd ,_ecd :=range cmap ._ga {if _bcg ,_ee :=cmap ._dgg [_ecd ];
!_ee ||(_ee &&_bcg > _ffd ){cmap ._dgg [_ecd ]=_ffd ;};};for _bgf ,_fe :=range cmap ._fd {if _cba ,_aeg :=cmap ._ef [_fe ];!_aeg ||(_aeg &&_cba > _bgf ){cmap ._ef [_fe ]=_bgf ;};};_fc .Slice (cmap ._cc ,func (_dc ,_bfc int )bool {return cmap ._cc [_dc ].Low < cmap ._cc [_bfc ].Low });
};func (cmap *CMap )NBits ()int {return cmap ._gf };func (cmap *CMap )matchCode (_fbf []byte )(_agc CharCode ,_agb int ,_gdg bool ){for _gcf :=0;_gcf < _ea ;_gcf ++{if _gcf < len (_fbf ){_agc =_agc <<8|CharCode (_fbf [_gcf ]);_agb ++;};_gdg =cmap .inCodespace (_agc ,_gcf +1);
if _gdg {return _agc ,_agb ,true ;};};_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fbf ,string (_fbf ),cmap );
return 0,0,false ;};func (cmap *CMap )parseBfchar ()error {for {_edcb ,_fbg :=cmap .parseObject ();if _fbg !=nil {if _fbg ==_ae .EOF {break ;};return _fbg ;};var _fag CharCode ;switch _bab :=_edcb .(type ){case cmapOperand :if _bab .Operand ==_gca {return nil ;
};return _c .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_fag =_bbag (_bab );default:return _c .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_edcb ,_fbg =cmap .parseObject ();if _fbg !=nil {if _fbg ==_ae .EOF {break ;};return _fbg ;};var _bgde []rune ;switch _cdcb :=_edcb .(type ){case cmapOperand :if _cdcb .Operand ==_gca {return nil ;};_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_cdcb );
return ErrBadCMap ;case cmapHexString :_bgde =_eedf (_cdcb );case cmapName :_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_cdcb );_bgde =[]rune {MissingCodeRune };
default:_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_edcb );return ErrBadCMap ;};cmap ._fd [_fag ]=string (_bgde );};return nil ;};func (_ddfe *cMapParser )parseObject ()(cmapObject ,error ){_ddfe .skipSpaces ();
for {_gbd ,_fccf :=_ddfe ._abfb .Peek (2);if _fccf !=nil {return nil ,_fccf ;};if _gbd [0]=='%'{_ddfe .parseComment ();_ddfe .skipSpaces ();continue ;}else if _gbd [0]=='/'{_acf ,_ebga :=_ddfe .parseName ();return _acf ,_ebga ;}else if _gbd [0]=='('{_eeg ,_dgbc :=_ddfe .parseString ();
return _eeg ,_dgbc ;}else if _gbd [0]=='['{_eddf ,_adc :=_ddfe .parseArray ();return _eddf ,_adc ;}else if (_gbd [0]=='<')&&(_gbd [1]=='<'){_egdd ,_bbf :=_ddfe .parseDict ();return _egdd ,_bbf ;}else if _gbd [0]=='<'{_agbf ,_dggd :=_ddfe .parseHexString ();
return _agbf ,_dggd ;}else if _eb .IsDecimalDigit (_gbd [0])||(_gbd [0]=='-'&&_eb .IsDecimalDigit (_gbd [1])){_bfa ,_deed :=_ddfe .parseNumber ();if _deed !=nil {return nil ,_deed ;};return _bfa ,nil ;}else {_ddd ,_cede :=_ddfe .parseOperand ();if _cede !=nil {return nil ,_cede ;
};return _ddd ,nil ;};};};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gd ,_dcb :=cmap ._ef [s ];return _gd ,_dcb };type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_fcc *CIDSystemInfo )String ()string {return _d .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fcc .Registry ,_fcc .Ordering ,_fcc .Supplement );
};func (cmap *CMap )parseBfrange ()error {for {var _bgda CharCode ;_gga ,_ffca :=cmap .parseObject ();if _ffca !=nil {if _ffca ==_ae .EOF {break ;};return _ffca ;};switch _adg :=_gga .(type ){case cmapOperand :if _adg .Operand ==_dcbb {return nil ;};return _c .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_bgda =_bbag (_adg );default:return _c .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _egde CharCode ;_gga ,_ffca =cmap .parseObject ();if _ffca !=nil {if _ffca ==_ae .EOF {break ;};return _ffca ;
};switch _dbae :=_gga .(type ){case cmapOperand :_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_egde =_bbag (_dbae );if _egde > 0xffff{_egde =0xffff;};default:_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gga );return ErrBadCMap ;
};_gga ,_ffca =cmap .parseObject ();if _ffca !=nil {if _ffca ==_ae .EOF {break ;};return _ffca ;};switch _ded :=_gga .(type ){case cmapArray :if len (_ded .Array )!=int (_egde -_bgda )+1{_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _eaaa :=_bgda ;_eaaa <=_egde ;_eaaa ++{_ace :=_ded .Array [_eaaa -_bgda ];_baad ,_fbce :=_ace .(cmapHexString );if !_fbce {return _c .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_fadg :=_eedf (_baad );cmap ._fd [_eaaa ]=string (_fadg );};case cmapHexString :_gbb :=_eedf (_ded );_aadc :=len (_gbb );for _fgd :=_bgda ;_fgd <=_egde ;_fgd ++{cmap ._fd [_fgd ]=string (_gbb );if _aadc > 0{_gbb [_aadc -1]++;}else {_g .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_fgd );
};if _fgd ==1<<32-1{break ;};};default:_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gga );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )Stream ()(*_eb .PdfObjectStream ,error ){if cmap ._aae !=nil {return cmap ._aae ,nil ;
};_dbcf ,_fgc :=_eb .MakeStream (cmap .Bytes (),_eb .NewFlateEncoder ());if _fgc !=nil {return nil ,_fgc ;};cmap ._aae =_dbcf ;return cmap ._aae ,nil ;};func _dbf (_bedcf cmapHexString )rune {_gaae :=_eedf (_bedcf );if _deab :=len (_gaae );_deab ==0{_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_bedcf );
return MissingCodeRune ;};if len (_gaae )> 1{_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_bedcf ,_gaae );
};return _gaae [0];};type cmapName struct{Name string ;};func (cmap *CMap )parseType ()error {_cfg :=0;_bgb :=false ;for _eea :=0;_eea < 3&&!_bgb ;_eea ++{_eba ,_efc :=cmap .parseObject ();if _efc !=nil {return _efc ;};switch _eaee :=_eba .(type ){case cmapOperand :switch _eaee .Operand {case "\u0064\u0065\u0066":_bgb =true ;
default:_g .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_eba );return ErrBadCMap ;};case cmapInt :_cfg =int (_eaee ._fcgd );
};};cmap ._fa =_cfg ;return nil ;};type cmapOperand struct{Operand string ;};func (_beba *cMapParser )parseArray ()(cmapArray ,error ){_cec :=cmapArray {};_cec .Array =[]cmapObject {};_beba ._abfb .ReadByte ();for {_beba .skipSpaces ();_dfaa ,_dae :=_beba ._abfb .Peek (1);
if _dae !=nil {return _cec ,_dae ;};if _dfaa [0]==']'{_beba ._abfb .ReadByte ();break ;};_acgd ,_dae :=_beba .parseObject ();if _dae !=nil {return _cec ,_dae ;};_cec .Array =append (_cec .Array ,_acgd );};return _cec ,nil ;};type cmapInt struct{_fcgd int64 };
func (cmap *CMap )Bytes ()[]byte {_g .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._ced )> 0{return cmap ._ced ;};cmap ._ced =[]byte (_ce .Join ([]string {_afc ,cmap .toBfData (),_geda },"\u000a"));
return cmap ._ced ;};func (cmap *CMap )parse ()error {var _bd cmapObject ;for {_afcc ,_dfd :=cmap .parseObject ();if _dfd !=nil {if _dfd ==_ae .EOF {break ;};_g .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_dfd );
return _dfd ;};switch _ebb :=_afcc .(type ){case cmapOperand :_baa :=_ebb ;switch _baa .Operand {case _faf :_abaf :=cmap .parseCodespaceRange ();if _abaf !=nil {return _abaf ;};case _dbga :_bcc :=cmap .parseCIDRange ();if _bcc !=nil {return _bcc ;};case _bbdd :_fgce :=cmap .parseBfchar ();
if _fgce !=nil {return _fgce ;};case _bcec :_gb :=cmap .parseBfrange ();if _gb !=nil {return _gb ;};case _dbd :if _bd ==nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_adf ,_ggf :=_bd .(cmapName );if !_ggf {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_bd );
return ErrBadCMap ;};cmap ._ed =_adf .Name ;case _ceea :_aad :=cmap .parseSystemInfo ();if _aad !=nil {return _aad ;};};case cmapName :_edb :=_ebb ;switch _edb .Name {case _ceea :_fgf :=cmap .parseSystemInfo ();if _fgf !=nil {return _fgf ;};case _bfb :_bbg :=cmap .parseName ();
if _bbg !=nil {return _bbg ;};case _fba :_bcga :=cmap .parseType ();if _bcga !=nil {return _bcga ;};case _cea :_bdg :=cmap .parseVersion ();if _bdg !=nil {return _bdg ;};case _ccg :if _dfd =cmap .parseWMode ();_dfd !=nil {return _dfd ;};};};_bd =_afcc ;
};return nil ;};func (_dfa *cMapParser )parseComment ()(string ,error ){var _egdea _fb .Buffer ;_ ,_ade :=_dfa .skipSpaces ();if _ade !=nil {return _egdea .String (),_ade ;};_bac :=true ;for {_dbac ,_egg :=_dfa ._abfb .Peek (1);if _egg !=nil {_g .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_egg );
return _egdea .String (),_egg ;};if _bac &&_dbac [0]!='%'{return _egdea .String (),ErrBadCMapComment ;};_bac =false ;if (_dbac [0]!='\r')&&(_dbac [0]!='\n'){_cad ,_ :=_dfa ._abfb .ReadByte ();_egdea .WriteByte (_cad );}else {break ;};};return _egdea .String (),nil ;
};func (_gdc *cMapParser )parseDict ()(cmapDict ,error ){_g .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_faaa :=_gccf ();_eee ,_ :=_gdc ._abfb .ReadByte ();if _eee !='<'{return _faaa ,ErrBadCMapDict ;
};_eee ,_ =_gdc ._abfb .ReadByte ();if _eee !='<'{return _faaa ,ErrBadCMapDict ;};for {_gdc .skipSpaces ();_bfe ,_cegc :=_gdc ._abfb .Peek (2);if _cegc !=nil {return _faaa ,_cegc ;};if (_bfe [0]=='>')&&(_bfe [1]=='>'){_gdc ._abfb .ReadByte ();_gdc ._abfb .ReadByte ();
break ;};_dge ,_cegc :=_gdc .parseName ();_g .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dge .Name );if _cegc !=nil {_g .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cegc );
return _faaa ,_cegc ;};_gdc .skipSpaces ();_fcg ,_cegc :=_gdc .parseObject ();if _cegc !=nil {return _faaa ,_cegc ;};_faaa .Dict [_dge .Name ]=_fcg ;_gdc .skipSpaces ();_bfe ,_cegc =_gdc ._abfb .Peek (3);if _cegc !=nil {return _faaa ,_cegc ;};if string (_bfe )=="\u0064\u0065\u0066"{_gdc ._abfb .Discard (3);
};};return _faaa ,nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_db :=_ec (name );if _db !=nil {return nil ,_db ;};if cmap ._ed ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ffc ,_db :=_ec (cmap ._ed );if _db !=nil {return nil ,_db ;
};for _de ,_af :=range _ffc ._ga {if _ ,_bce :=cmap ._ga [_de ];!_bce {cmap ._ga [_de ]=_af ;};};cmap ._cc =append (cmap ._cc ,_ffc ._cc ...);cmap .computeInverseMappings ();return cmap ,nil ;};type cMapParser struct{_abfb *_b .Reader };func (cmap *CMap )parseVersion ()error {_fccc :="";
_cbb :=false ;for _bdf :=0;_bdf < 3&&!_cbb ;_bdf ++{_eaea ,_gccga :=cmap .parseObject ();if _gccga !=nil {return _gccga ;};switch _facg :=_eaea .(type ){case cmapOperand :switch _facg .Operand {case "\u0064\u0065\u0066":_cbb =true ;default:_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_eaea );
return ErrBadCMap ;};case cmapInt :_fccc =_d .Sprintf ("\u0025\u0064",_facg ._fcgd );case cmapFloat :_fccc =_d .Sprintf ("\u0025\u0066",_facg ._ega );case cmapString :_fccc =_facg .String ;default:_g .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_eaea );
};};cmap ._bc =_fccc ;return nil ;};type cmapDict struct{Dict map[string ]cmapObject ;};type cmapFloat struct{_ega float64 };func _bfbc (_bff []byte )*cMapParser {_fdc :=cMapParser {};_agcc :=_fb .NewBuffer (_bff );_fdc ._abfb =_b .NewReader (_agcc );return &_fdc ;
};func _bba (_gce string )rune {_eaa :=[]rune (_gce );return _eaa [len (_eaa )-1]};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_eab ,_cde :=cmap ._dgg [cid ];return _eab ,_cde ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ab :=make (map[CharCode ]string ,len (codeToRune ));
for _bee ,_df :=range codeToRune {_ab [_bee ]=string (_df );};cmap :=&CMap {_cb :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fa :2,_gf :16,_fcf :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cc :[]Codespace {{Low :0,High :0xffff}},_fd :_ab ,_ef :make (map[string ]CharCode ,len (codeToRune )),_ga :make (map[CharCode ]CharCode ,len (codeToRune )),_dgg :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_g .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ddb (isSimple );cmap .cMapParser =_bfbc (data );_abd :=cmap .parse ();if _abd !=nil {return nil ,_abd ;};if len (cmap ._cc )==0{if cmap ._ed !=""{return cmap ,nil ;};_g .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type CharCode uint32 ;const (_ceea ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_caf ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_fec ="\u0065n\u0064\u0063\u006d\u0061\u0070";
_faf ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_eff ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_bbdd ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";
_gca ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_bcec ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dcbb ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dbga ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";
_acd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dbd ="\u0075s\u0065\u0063\u006d\u0061\u0070";_ccg ="\u0057\u004d\u006fd\u0065";_bfb ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_fba ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";
_cea ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);