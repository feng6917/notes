//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_b "bytes";_a "fmt";_da "github.com/unidoc/unichart/render";_g "golang/unipdf/common";_bc "golang/unipdf/contentstream";_be "golang/unipdf/contentstream/draw";_cd "golang/unipdf/core";
_de "golang/unipdf/model";_f "image/color";_dd "io";_c "math";);func (_fg *Renderer )SetStrokeDashArray (dashArray []float64 ){_gdb :=make ([]int64 ,len (dashArray ));for _dce ,_ee :=range dashArray {_gdb [_dce ]=int64 (_ee );};_fg ._gef .Add_d (_gdb ,0);
};func (_fa *Renderer )getTextWidth (_eec string )float64 {var _edb float64 ;for _ ,_dgb :=range _eec {_bega ,_fcd :=_fa ._gefg .GetRuneMetrics (_dgb );if !_fcd {_g .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_dgb );
};_edb +=_bega .Wx ;};return _fa ._ga *_edb /1000.0;};func (_aad *Renderer )Close (){_aad ._gef .Add_h ()};func (_fff *Renderer )Text (text string ,x ,y int ){_fff ._gef .Add_q ();_fff .SetFont (_fff ._gefg );_cbe ,_dcf ,_aab ,_ :=_gaf (_fff ._e );_fff ._gef .Add_rg (_cbe ,_dcf ,_aab );
_fff ._gef .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _gdg :=_fff ._dc ;_gdg !=0{_fff ._gef .RotateDeg (_gdg );};_fff ._gef .Add_BT ().Add_TL (_fff ._ga );var (_eefe =_fff ._gefg .Encoder ();_eac =_fff .wrapText (text );_ded =len (_eac ););
for _gg ,_fcba :=range _eac {_fff ._gef .Add_TJ (_cd .MakeStringFromBytes (_eefe .Encode (_fcba )));if _gg !=_ded -1{_fff ._gef .Add_Tstar ();};};_fff ._gef .Add_ET ();_fff ._gef .Add_Q ();};type Renderer struct{_dee int ;_dda int ;_ge float64 ;_gef *_bc .ContentCreator ;
_fb *_de .PdfPageResources ;_ag _f .Color ;_af _f .Color ;_ff float64 ;_gefg *_de .PdfFont ;_ga float64 ;_e _f .Color ;_dc float64 ;_fe map[*_de .PdfFont ]_cd .PdfObjectName ;};func _aecc (_gddb string ,_dgfg int ,_fae func (_cd .PdfObjectName )bool )_cd .PdfObjectName {_fca :=_cd .PdfObjectName (_a .Sprintf ("\u0025\u0073\u0025\u0064",_gddb ,_dgfg ));
for _fcac :=_dgfg ;_fae (_fca );{_fcac ++;_fca =_cd .PdfObjectName (_a .Sprintf ("\u0025\u0073\u0025\u0064",_gddb ,_fcac ));};return _fca ;};func (_ebd *Renderer )MeasureText (text string )_da .Box {_gefga :=_ebd ._ga ;_db ,_acg :=_ebd ._gefg .GetFontDescriptor ();
if _acg !=nil {_g .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");}else {_bcb ,_cf :=_db .GetCapHeight ();
if _cf !=nil {_g .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_cf );
}else {_gefga =_bcb /1000.0*_ebd ._ga ;};};var (_dde =0.0;_cfb =_ebd .wrapText (text ););for _ ,_ba :=range _cfb {if _aba :=_ebd .getTextWidth (_ba );_aba > _dde {_dde =_aba ;};};_ffc :=_da .NewBox (0,0,int (_dde ),int (_gefga ));if _ef :=_ebd ._dc ;_ef !=0{_ffc =_ffc .Corners ().Rotate (_ef ).Box ();
};return _ffc ;};func (_cdd *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_ace (2.0*_c .Pi -startAngle );deltaAngle =_ace (-deltaAngle );_fcb ,_cgb :=deltaAngle ,1;if _c .Abs (deltaAngle )> 90.0{_cgb =int (_c .Ceil (_c .Abs (deltaAngle )/90.0));
_fcb =deltaAngle /float64 (_cgb );};var (_aeg =_dga (_fcb /2);_beg =_c .Abs (4.0/3.0*(1.0-_c .Cos (_aeg ))/_c .Sin (_aeg ));_gbf =float64 (cx );_df =float64 (cy ););for _eef :=0;_eef < _cgb ;_eef ++{_dac :=_dga (startAngle +float64 (_eef )*_fcb );_gee :=_dga (startAngle +float64 (_eef +1)*_fcb );
_fbg :=_c .Cos (_dac );_ebf :=_c .Cos (_gee );_dgf :=_c .Sin (_dac );_caa :=_c .Sin (_gee );var _fgb []float64 ;if _fcb > 0{_fgb =[]float64 {_gbf +rx *_fbg ,_df -ry *_dgf ,_gbf +rx *(_fbg -_beg *_dgf ),_df -ry *(_dgf +_beg *_fbg ),_gbf +rx *(_ebf +_beg *_caa ),_df -ry *(_caa -_beg *_ebf ),_gbf +rx *_ebf ,_df -ry *_caa };
}else {_fgb =[]float64 {_gbf +rx *_fbg ,_df -ry *_dgf ,_gbf +rx *(_fbg +_beg *_dgf ),_df -ry *(_dgf -_beg *_fbg ),_gbf +rx *(_ebf -_beg *_caa ),_df -ry *(_caa +_beg *_ebf ),_gbf +rx *_ebf ,_df -ry *_caa };};if _eef ==0{_cdd ._gef .Add_l (_fgb [0],_fgb [1]);
};_cdd ._gef .Add_c (_fgb [2],_fgb [3],_fgb [4],_fgb [5],_fgb [6],_fgb [7]);};};func (_abe *Renderer )MoveTo (x ,y int ){_abe ._gef .Add_m (float64 (x ),float64 (y ))};func (_bb *Renderer )SetFont (font _da .Font ){_cc ,_dad :=font .(*_de .PdfFont );if !_dad {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");
return ;};_abb ,_dad :=_bb ._fe [_cc ];if !_dad {_abb =_aecc ("\u0046\u006f\u006e\u0074",1,_bb ._fb .HasFontByName );if _ebb :=_bb ._fb .SetFontByName (_abb ,_cc .ToPdfObject ());_ebb !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_cc );
};_bb ._fe [_cc ]=_abb ;};_bb ._gef .Add_Tf (_abb ,_bb ._ga );_bb ._gefg =_cc ;};func NewRenderer (cc *_bc .ContentCreator ,res *_de .PdfPageResources )func (int ,int )(_da .Renderer ,error ){return func (_ab ,_ca int )(_da .Renderer ,error ){_cg :=&Renderer {_dee :_ab ,_dda :_ca ,_ge :72,_gef :cc ,_fb :res ,_fe :map[*_de .PdfFont ]_cd .PdfObjectName {}};
_cg .ResetStyle ();return _cg ,nil ;};};func (_gbfe *Renderer )Circle (radius float64 ,x ,y int ){_gc :=radius ;if _ea :=_gbfe ._ff ;_ea !=0{_gc -=_ea /2;};_daf :=_gc *0.551784;_aec :=_be .CubicBezierPath {Curves :[]_be .CubicBezierCurve {_be .NewCubicBezierCurve (-_gc ,0,-_gc ,_daf ,-_daf ,_gc ,0,_gc ),_be .NewCubicBezierCurve (0,_gc ,_daf ,_gc ,_gc ,_daf ,_gc ,0),_be .NewCubicBezierCurve (_gc ,0,_gc ,-_daf ,_daf ,-_gc ,0,-_gc ),_be .NewCubicBezierCurve (0,-_gc ,-_daf ,-_gc ,-_gc ,-_daf ,-_gc ,0)}};
if _ec :=_gbfe ._ff ;_ec !=0{_aec =_aec .Offset (_ec /2,_ec /2);};_aec =_aec .Offset (float64 (x ),float64 (y ));_be .DrawBezierPathWithCreator (_aec ,_gbfe ._gef );};func (_fdc *Renderer )Save (w _dd .Writer )error {if w ==nil {return nil ;};_ ,_gcf :=_dd .Copy (w ,_b .NewBuffer (_fdc ._gef .Bytes ()));
return _gcf ;};func (_eb *Renderer )LineTo (x ,y int ){_eb ._gef .Add_l (float64 (x ),float64 (y ))};func (_gca *Renderer )SetFontSize (size float64 ){_gca ._ga =size };func (_gcd *Renderer )SetTextRotation (radians float64 ){_gcd ._dc =_ace (-radians )};
func _ade (_agc _f .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_dfc ,_efc ,_ecf ,_eed :=_agc .RGBA ();return uint8 (_dfc >>8),uint8 (_efc >>8),uint8 (_ecf >>8),uint8 (_eed >>8);};func (_gec *Renderer )SetClassName (name string ){};func (_dae *Renderer )Stroke (){_dae ._gef .Add_S ()};
func (_aae *Renderer )ClearTextRotation (){_aae ._dc =0};func (_fgc *Renderer )SetFontColor (color _f .Color ){_fgc ._e =color };func (_ad *Renderer )Fill (){_ad ._gef .Add_f ()};func (_cda *Renderer )SetStrokeColor (color _f .Color ){_cda ._af =color ;
_gb ,_cad ,_gd ,_ :=_gaf (color );_cda ._gef .Add_RG (_gb ,_cad ,_gd );};func (_fec *Renderer )wrapText (_gdd string )[]string {var (_cbg []string ;_cbc []rune ;);for _ ,_bef :=range _gdd {if _bef =='\n'{_cbg =append (_cbg ,string (_cbc ));_cbc =[]rune {};
continue ;};_cbc =append (_cbc ,_bef );};if len (_cbc )> 0{_cbg =append (_cbg ,string (_cbc ));};return _cbg ;};func (_cb *Renderer )FillStroke (){_cb ._gef .Add_B ()};func (_geb *Renderer )SetDPI (dpi float64 ){_geb ._ge =dpi };func _dga (_ebdc float64 )float64 {return _ebdc *_c .Pi /180.0};
func _ace (_dbb float64 )float64 {return _dbb *180/_c .Pi };func (_fd *Renderer )SetStrokeWidth (width float64 ){_fd ._ff =width ;_fd ._gef .Add_w (width )};func (_ac *Renderer )SetFillColor (color _f .Color ){_ac ._ag =color ;_cab ,_ed ,_dg ,_ :=_gaf (color );
_ac ._gef .Add_rg (_cab ,_ed ,_dg );};func (_ae *Renderer )GetDPI ()float64 {return _ae ._ge };func _gaf (_gda _f .Color )(float64 ,float64 ,float64 ,float64 ){_fce ,_ecc ,_gge ,_bbb :=_ade (_gda );return float64 (_fce )/255,float64 (_ecc )/255,float64 (_gge )/255,float64 (_bbb )/255;
};func (_fc *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_fc ._gef .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_aa *Renderer )ResetStyle (){_aa .SetFillColor (_f .Black );_aa .SetStrokeColor (_f .Transparent );_aa .SetStrokeWidth (0);
_aa .SetFont (_de .DefaultFont ());_aa .SetFontColor (_f .Black );_aa .SetFontSize (12);_aa .SetTextRotation (0);};