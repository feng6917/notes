//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_a "errors";_f "fmt";_af "regexp";_c "strconv";_dd "time";);var _eeb =_af .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func FormatPdfTime (in _dd .Time )string {_g :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_cb ,_ :=_c .ParseInt (_g [1:3],10,32);_df ,_ :=_c .ParseInt (_g [4:6],10,32);_da :=int64 (in .Year ());_b :=int64 (in .Month ());_dff :=int64 (in .Day ());
_gd :=int64 (in .Hour ());_ad :=int64 (in .Minute ());_cag :=int64 (in .Second ());_ag :=_g [0];return _f .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_da ,_b ,_dff ,_gd ,_ad ,_cag ,_ag ,_cb ,_df );
};func ParsePdfTime (pdfTime string )(_dd .Time ,error ){_be :=_eeb .FindAllStringSubmatch (pdfTime ,1);if len (_be )< 1{return _dd .Time {},_f .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_be [0])!=10{return _dd .Time {},_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_fg ,_ :=_c .ParseInt (_be [0][1],10,32);_e ,_ :=_c .ParseInt (_be [0][2],10,32);_ge ,_ :=_c .ParseInt (_be [0][3],10,32);_bg ,_ :=_c .ParseInt (_be [0][4],10,32);_dfd ,_ :=_c .ParseInt (_be [0][5],10,32);_cbc ,_ :=_c .ParseInt (_be [0][6],10,32);var (_geb byte ;
_dfc int64 ;_ee int64 ;);if len (_be [0][7])> 0{_geb =_be [0][7][0];}else {_geb ='+';};if len (_be [0][8])> 0{_dfc ,_ =_c .ParseInt (_be [0][8],10,32);}else {_dfc =0;};if len (_be [0][9])> 0{_ee ,_ =_c .ParseInt (_be [0][9],10,32);}else {_ee =0;};_ddc :=int (_dfc *60*60+_ee *60);
switch _geb {case '-':_ddc =-_ddc ;case 'Z':_ddc =0;};_gef :=_f .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_geb ,_dfc ,_ee );_ec :=_dd .FixedZone (_gef ,_ddc );return _dd .Date (int (_fg ),_dd .Month (_e ),int (_ge ),int (_bg ),int (_dfd ),int (_cbc ),0,_ec ),nil ;
};