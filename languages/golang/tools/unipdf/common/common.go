//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_a "fmt";_e "io";_b "os";_dd "path/filepath";_c "runtime";_d "time";);

// Error logs error message.
func (_cc WriterLogger )Error (format string ,args ...interface{}){if _cc .LogLevel >=LogLevelError {_fea :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_cc .logToWriter (_cc .Output ,_fea ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Warning logs warning message.
func (_egf ConsoleLogger )Warning (format string ,args ...interface{}){if _egf .LogLevel >=LogLevelWarning {_ef :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_egf .output (_b .Stdout ,_ef ,format ,args ...);};};const _bcb =2;

// Trace logs trace message.
func (_dgd ConsoleLogger )Trace (format string ,args ...interface{}){if _dgd .LogLevel >=LogLevelTrace {_dcf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_dgd .output (_b .Stdout ,_dcf ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};func (_eee WriterLogger )logToWriter (_gcd _e .Writer ,_eec string ,_ge string ,_cag ...interface{}){_gf (_gcd ,_eec ,_ge ,_cag );};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_g string ,_eb ...interface{});Warning (_eg string ,_bf ...interface{});Notice (_cf string ,_dc ...interface{});Info (_bfc string ,_gc ...interface{});Debug (_aa string ,_ee ...interface{});Trace (_dg string ,_ae ...interface{});
IsLogLevel (_cfg LogLevel )bool ;};const Version ="\u0033\u002e\u0034\u0033\u002e\u0030";const _aaf =7;

// Notice logs notice message.
func (_bd WriterLogger )Notice (format string ,args ...interface{}){if _bd .LogLevel >=LogLevelNotice {_ba :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bd .logToWriter (_bd .Output ,_ba ,format ,args ...);};};const _caa ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";
const _ce =30;

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};const _gfd =15;

// Notice logs notice message.
func (_ca ConsoleLogger )Notice (format string ,args ...interface{}){if _ca .LogLevel >=LogLevelNotice {_gb :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ca .output (_b .Stdout ,_gb ,format ,args ...);};};func (_fb ConsoleLogger )output (_ecg _e .Writer ,_gd string ,_fe string ,_egb ...interface{}){_gf (_ecg ,_gd ,_fe ,_egb ...);
};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _e .Writer )*WriterLogger {_gde :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_gde ;};

// Warning logs warning message.
func (_fee WriterLogger )Warning (format string ,args ...interface{}){if _fee .LogLevel >=LogLevelWarning {_dad :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_fee .logToWriter (_fee .Output ,_dad ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Info logs info message.
func (_efb WriterLogger )Info (format string ,args ...interface{}){if _efb .LogLevel >=LogLevelInfo {_bad :="\u005bI\u004e\u0046\u004f\u005d\u0020";_efb .logToWriter (_efb .Output ,_bad ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ec ConsoleLogger )IsLogLevel (level LogLevel )bool {return _ec .LogLevel >=level };

// LogLevel is the verbosity level for logging.
type LogLevel int ;var ReleasedAt =_d .Date (_egc ,_bcb ,_aaf ,_gfd ,_ce ,0,0,_d .UTC );

// Debug logs debug message.
func (_dadc WriterLogger )Debug (format string ,args ...interface{}){if _dadc .LogLevel >=LogLevelDebug {_bgg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_dadc .logToWriter (_dadc .Output ,_bgg ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cab WriterLogger )IsLogLevel (level LogLevel )bool {return _cab .LogLevel >=level };

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Info logs info message.
func (_da ConsoleLogger )Info (format string ,args ...interface{}){if _da .LogLevel >=LogLevelInfo {_gbb :="\u005bI\u004e\u0046\u004f\u005d\u0020";_da .output (_b .Stdout ,_gbb ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _d .Time )string {return t .Format (_caa )+"\u0020\u0055\u0054\u0043"};var Log Logger =DummyLogger {};

// DummyLogger does nothing.
type DummyLogger struct{};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _e .Writer ;};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Error logs error message.
func (_aag ConsoleLogger )Error (format string ,args ...interface{}){if _aag .LogLevel >=LogLevelError {_ac :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_aag .output (_b .Stdout ,_ac ,format ,args ...);};};func _gf (_ed _e .Writer ,_be string ,_fa string ,_bde ...interface{}){_ ,_edc ,_bce ,_dcc :=_c .Caller (3);
if !_dcc {_edc ="\u003f\u003f\u003f";_bce =0;}else {_edc =_dd .Base (_edc );};_bdec :=_a .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_be ,_edc ,_bce )+_fa +"\u000a";_a .Fprintf (_ed ,_bdec ,_bde ...);};

// Debug logs debug message.
func (_bg ConsoleLogger )Debug (format string ,args ...interface{}){if _bg .LogLevel >=LogLevelDebug {_ff :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_bg .output (_b .Stdout ,_ff ,format ,args ...);};};const _egc =2023;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Trace logs trace message.
func (_fg WriterLogger )Trace (format string ,args ...interface{}){if _fg .LogLevel >=LogLevelTrace {_ad :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fg .logToWriter (_fg .Output ,_ad ,format ,args ...);};};