//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_b "bytes";_fa "crypto";_dd "crypto/x509";_df "encoding/asn1";_a "encoding/pem";_d "errors";_cc "fmt";_be "github.com/unidoc/timestamp";_ge "lgo/test/unipdf/common";_e "golang.org/x/crypto/ocsp";_c "io";_cd "io/ioutil";
_cb "net/http";_g "time";);

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_ea *CRLClient )MakeRequest (serverURL string ,cert *_dd .Certificate )([]byte ,error ){if _ea .HTTPClient ==nil {_ea .HTTPClient =_gd ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_d .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_fb ,_gab :=_ea .HTTPClient .Get (serverURL );if _gab !=nil {return nil ,_gab ;};defer _fb .Body .Close ();_ad ,_gab :=_cd .ReadAll (_fb .Body );if _gab !=nil {return nil ,_gab ;};if _ae ,_ :=_a .Decode (_ad );
_ae !=nil {_ad =_ae .Bytes ;};return _ad ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_fg *CertClient )GetIssuer (cert *_dd .Certificate )(*_dd .Certificate ,error ){for _ ,_ccf :=range cert .IssuingCertificateURL {_ga ,_cca :=_fg .Get (_ccf );if _cca !=nil {_ge .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_cca );
continue ;};return _ga ,nil ;};return nil ,_cc .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_gd (),Hash :_fa .SHA1 }};func _gd ()*_cb .Client {return &_cb .Client {Timeout :5*_g .Second }};

// Get retrieves the certificate at the specified URL.
func (_fag *CertClient )Get (url string )(*_dd .Certificate ,error ){if _fag .HTTPClient ==nil {_fag .HTTPClient =_gd ();};_fad ,_ce :=_fag .HTTPClient .Get (url );if _ce !=nil {return nil ,_ce ;};defer _fad .Body .Close ();_bee ,_ce :=_cd .ReadAll (_fad .Body );
if _ce !=nil {return nil ,_ce ;};if _bc ,_ :=_a .Decode (_bee );_bc !=nil {_bee =_bc .Bytes ;};_eg ,_ce :=_dd .ParseCertificate (_bee );if _ce !=nil {return nil ,_ce ;};return _eg ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _c .Reader ,opts *_be .RequestOptions )(*_be .Request ,error ){if opts ==nil {opts =&_be .RequestOptions {};};if opts .Hash ==0{opts .Hash =_fa .SHA256 ;};if !opts .Hash .Available (){return nil ,_dd .ErrUnsupportedAlgorithm ;
};_ccfd :=opts .Hash .New ();if _ ,_bd :=_c .Copy (_ccfd ,body );_bd !=nil {return nil ,_bd ;};return &_be .Request {HashAlgorithm :opts .Hash ,HashedMessage :_ccfd .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_gd ()}};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_cbc *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_dd .Certificate )(*_e .Response ,[]byte ,error ){if _cbc .HTTPClient ==nil {_cbc .HTTPClient =_gd ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_d .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_bg ,_ff :=_e .CreateRequest (cert ,issuer ,&_e .RequestOptions {Hash :_cbc .Hash });if _ff !=nil {return nil ,nil ,_ff ;};_fgb ,_ff :=_cbc .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_b .NewReader (_bg ));
if _ff !=nil {return nil ,nil ,_ff ;};defer _fgb .Body .Close ();_dc ,_ff :=_cd .ReadAll (_fgb .Body );if _ff !=nil {return nil ,nil ,_ff ;};if _cbb ,_ :=_a .Decode (_dc );_cbb !=nil {_dc =_cbb .Bytes ;};_da ,_ff :=_e .ParseResponseForCert (_dc ,cert ,issuer );
if _ff !=nil {return nil ,nil ,_ff ;};return _da ,_dc ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_cg *CertClient )IsCA (cert *_dd .Certificate )bool {return cert .IsCA &&_b .Equal (cert .RawIssuer ,cert .RawSubject );};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cb .Client ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cb .Client ;

// Callbacks.
BeforeHTTPRequest func (_gb *_cb .Request )error ;};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_gd ()}};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_gd ()}};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_eeg *TimestampClient )GetEncodedToken (serverURL string ,req *_be .Request )([]byte ,error ){if serverURL ==""{return nil ,_cc .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_cc .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gc ,_ddb :=req .Marshal ();if _ddb !=nil {return nil ,_ddb ;
};_cba ,_ddb :=_cb .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_b .NewBuffer (_gc ));if _ddb !=nil {return nil ,_ddb ;};_cba .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _eeg .BeforeHTTPRequest !=nil {if _ab :=_eeg .BeforeHTTPRequest (_cba );_ab !=nil {return nil ,_ab ;};};_cgf :=_eeg .HTTPClient ;if _cgf ==nil {_cgf =_gd ();};_bgc ,_ddb :=_cgf .Do (_cba );if _ddb !=nil {return nil ,_ddb ;};defer _bgc .Body .Close ();
_fff ,_ddb :=_cd .ReadAll (_bgc .Body );if _ddb !=nil {return nil ,_ddb ;};if _bgc .StatusCode !=_cb .StatusOK {return nil ,_cc .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_bgc .StatusCode );
};var _egd struct{Version _df .RawValue ;Content _df .RawValue ;};if _ ,_ddb =_df .Unmarshal (_fff ,&_egd );_ddb !=nil {return nil ,_ddb ;};return _egd .Content .FullBytes ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cb .Client ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cb .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _fa .Hash ;};