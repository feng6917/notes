//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_d "lgo/test/unipdf/internal/bitwise";_f "io";_ed "math";);func (_gag *tree )fill (_cbcf ,_afg ,_gae int )error {_egf :=_gag ._bffe ;for _ffb :=0;_ffb < _cbcf ;_ffb ++{_gfa :=_cbcf -1-_ffb ;_adb :=((_afg >>uint (_gfa ))&1)!=0;
_abb :=_egf .walk (_adb );if _abb !=nil {if _abb ._dgggc {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_egf =_abb ;continue ;};_abb =&treeNode {};if _ffb ==_cbcf -1{_abb ._gbb =_gae ;_abb ._dgggc =true ;};if _afg ==0{_abb ._cafg =true ;};_egf .set (_adb ,_abb );_egf =_abb ;};return nil ;};func init (){_ef =&treeNode {_dgggc :true ,_gbb :_a };_b =&treeNode {_gbb :_da ,_bdbga :_ef };
_b ._fecd =_b ;_fe =&tree {_bffe :&treeNode {}};if _be :=_fe .fillWithNode (12,0,_b );_be !=nil {panic (_be .Error ());};if _ca :=_fe .fillWithNode (12,1,_ef );_ca !=nil {panic (_ca .Error ());};_g =&tree {_bffe :&treeNode {}};for _gf :=0;_gf < len (_af );
_gf ++{for _ad :=0;_ad < len (_af [_gf ]);_ad ++{if _de :=_g .fill (_gf +2,int (_af [_gf ][_ad ]),int (_bd [_gf ][_ad ]));_de !=nil {panic (_de .Error ());};};};if _aa :=_g .fillWithNode (12,0,_b );_aa !=nil {panic (_aa .Error ());};if _dg :=_g .fillWithNode (12,1,_ef );
_dg !=nil {panic (_dg .Error ());};_edg =&tree {_bffe :&treeNode {}};for _cg :=0;_cg < len (_fg );_cg ++{for _cad :=0;_cad < len (_fg [_cg ]);_cad ++{if _gg :=_edg .fill (_cg +4,int (_fg [_cg ][_cad ]),int (_bef [_cg ][_cad ]));_gg !=nil {panic (_gg .Error ());
};};};if _ee :=_edg .fillWithNode (12,0,_b );_ee !=nil {panic (_ee .Error ());};if _eg :=_edg .fillWithNode (12,1,_ef );_eg !=nil {panic (_eg .Error ());};_fa =&tree {_bffe :&treeNode {}};if _fc :=_fa .fill (4,1,_gc );_fc !=nil {panic (_fc .Error ());};
if _cd :=_fa .fill (3,1,_efe );_cd !=nil {panic (_cd .Error ());};if _ada :=_fa .fill (1,1,0);_ada !=nil {panic (_ada .Error ());};if _bed :=_fa .fill (3,3,1);_bed !=nil {panic (_bed .Error ());};if _fcg :=_fa .fill (6,3,2);_fcg !=nil {panic (_fcg .Error ());
};if _eeg :=_fa .fill (7,3,3);_eeg !=nil {panic (_eeg .Error ());};if _ggf :=_fa .fill (3,2,-1);_ggf !=nil {panic (_ggf .Error ());};if _bf :=_fa .fill (6,2,-2);_bf !=nil {panic (_bf .Error ());};if _ff :=_fa .fill (7,2,-3);_ff !=nil {panic (_ff .Error ());
};};func _dffe (_bdbe []byte ,_fab int ,_cce code )([]byte ,int ){_fgef :=true ;var _ggafe []byte ;_ggafe ,_fab =_daag (nil ,_fab ,_cce );_ba :=0;var _eag int ;for _ba < len (_bdbe ){_eag ,_ba =_cbgb (_bdbe ,_fgef ,_ba );_ggafe ,_fab =_bedd (_ggafe ,_fab ,_eag ,_fgef );
_fgef =!_fgef ;};return _ggafe ,_fab %8;};var (_gce =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_fgc =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_gfbb *Decoder )decoderRowType41D ()error {if _gfbb ._dae {_gfbb ._dbb .Align ();};_gfbb ._dbb .Mark ();var (_fca bool ;_cgd error ;);if _gfbb ._ebc {_fca ,_cgd =_gfbb .tryFetchEOL ();if _cgd !=nil {return _cgd ;};if !_fca {return _fgc ;};}else {_fca ,_cgd =_gfbb .looseFetchEOL ();
if _cgd !=nil {return _cgd ;};};if !_fca {_gfbb ._dbb .Reset ();};if _fca &&_gfbb ._ggaf {_gfbb ._dbb .Mark ();for _aaa :=0;_aaa < 5;_aaa ++{_fca ,_cgd =_gfbb .tryFetchEOL ();if _cgd !=nil {if _e .Is (_cgd ,_f .EOF ){if _aaa ==0{break ;};return _gce ;};
};if _fca {continue ;};if _aaa > 0{return _gce ;};break ;};if _fca {return _f .EOF ;};_gfbb ._dbb .Reset ();};if _cgd =_gfbb .decode1D ();_cgd !=nil {return _cgd ;};return nil ;};var (_ae map[int ]code ;_cge map[int ]code ;_ga map[int ]code ;_efec map[int ]code ;
_cae map[int ]code ;_bdb map[int ]byte ;_deb =code {Code :1<<4,BitsWritten :12};_dag =code {Code :3<<3,BitsWritten :13};_cc =code {Code :2<<3,BitsWritten :13};_eb =code {Code :1<<12,BitsWritten :4};_ag =code {Code :1<<13,BitsWritten :3};_aab =code {Code :1<<15,BitsWritten :1};
_ede =code {Code :3<<13,BitsWritten :3};_fee =code {Code :3<<10,BitsWritten :6};_fd =code {Code :3<<9,BitsWritten :7};_edf =code {Code :2<<13,BitsWritten :3};_gca =code {Code :2<<10,BitsWritten :6};_db =code {Code :2<<9,BitsWritten :7};);func _aag (_caeg ,_cbcbc []byte ,_bcfe int ,_gggf bool )int {_fde :=_dgdf (_cbcbc ,_bcfe );
if _fde < len (_cbcbc )&&(_bcfe ==-1&&_cbcbc [_fde ]==_cff ||_bcfe >=0&&_bcfe < len (_caeg )&&_caeg [_bcfe ]==_cbcbc [_fde ]||_bcfe >=len (_caeg )&&_gggf &&_cbcbc [_fde ]==_cff ||_bcfe >=len (_caeg )&&!_gggf &&_cbcbc [_fde ]==_fdd ){_fde =_dgdf (_cbcbc ,_fde );
};return _fde ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func init (){_ae =make (map[int ]code );_ae [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_ae [1]=code {Code :2<<(5+8),BitsWritten :3};_ae [2]=code {Code :3<<(6+8),BitsWritten :2};_ae [3]=code {Code :2<<(6+8),BitsWritten :2};_ae [4]=code {Code :3<<(5+8),BitsWritten :3};_ae [5]=code {Code :3<<(4+8),BitsWritten :4};_ae [6]=code {Code :2<<(4+8),BitsWritten :4};
_ae [7]=code {Code :3<<(3+8),BitsWritten :5};_ae [8]=code {Code :5<<(2+8),BitsWritten :6};_ae [9]=code {Code :4<<(2+8),BitsWritten :6};_ae [10]=code {Code :4<<(1+8),BitsWritten :7};_ae [11]=code {Code :5<<(1+8),BitsWritten :7};_ae [12]=code {Code :7<<(1+8),BitsWritten :7};
_ae [13]=code {Code :4<<8,BitsWritten :8};_ae [14]=code {Code :7<<8,BitsWritten :8};_ae [15]=code {Code :12<<8,BitsWritten :9};_ae [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ae [17]=code {Code :6<<8,BitsWritten :10};_ae [18]=code {Code :2<<8,BitsWritten :10};
_ae [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ae [20]=code {Code :13<<8,BitsWritten :11};_ae [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ae [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ae [23]=code {Code :5<<8,BitsWritten :11};_ae [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_ae [25]=code {Code :3<<8,BitsWritten :11};_ae [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ae [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ae [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ae [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ae [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_ae [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ae [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ae [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ae [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ae [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ae [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_ae [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ae [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ae [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ae [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ae [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ae [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_ae [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ae [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ae [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ae [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ae [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ae [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_ae [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ae [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ae [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ae [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ae [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ae [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_ae [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ae [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ae [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ae [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ae [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ae [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_ae [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ae [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ae [63]=code {Code :6<<8|7<<4,BitsWritten :12};_cge =make (map[int ]code );_cge [0]=code {Code :53<<8,BitsWritten :8};_cge [1]=code {Code :7<<(2+8),BitsWritten :6};
_cge [2]=code {Code :7<<(4+8),BitsWritten :4};_cge [3]=code {Code :8<<(4+8),BitsWritten :4};_cge [4]=code {Code :11<<(4+8),BitsWritten :4};_cge [5]=code {Code :12<<(4+8),BitsWritten :4};_cge [6]=code {Code :14<<(4+8),BitsWritten :4};_cge [7]=code {Code :15<<(4+8),BitsWritten :4};
_cge [8]=code {Code :19<<(3+8),BitsWritten :5};_cge [9]=code {Code :20<<(3+8),BitsWritten :5};_cge [10]=code {Code :7<<(3+8),BitsWritten :5};_cge [11]=code {Code :8<<(3+8),BitsWritten :5};_cge [12]=code {Code :8<<(2+8),BitsWritten :6};_cge [13]=code {Code :3<<(2+8),BitsWritten :6};
_cge [14]=code {Code :52<<(2+8),BitsWritten :6};_cge [15]=code {Code :53<<(2+8),BitsWritten :6};_cge [16]=code {Code :42<<(2+8),BitsWritten :6};_cge [17]=code {Code :43<<(2+8),BitsWritten :6};_cge [18]=code {Code :39<<(1+8),BitsWritten :7};_cge [19]=code {Code :12<<(1+8),BitsWritten :7};
_cge [20]=code {Code :8<<(1+8),BitsWritten :7};_cge [21]=code {Code :23<<(1+8),BitsWritten :7};_cge [22]=code {Code :3<<(1+8),BitsWritten :7};_cge [23]=code {Code :4<<(1+8),BitsWritten :7};_cge [24]=code {Code :40<<(1+8),BitsWritten :7};_cge [25]=code {Code :43<<(1+8),BitsWritten :7};
_cge [26]=code {Code :19<<(1+8),BitsWritten :7};_cge [27]=code {Code :36<<(1+8),BitsWritten :7};_cge [28]=code {Code :24<<(1+8),BitsWritten :7};_cge [29]=code {Code :2<<8,BitsWritten :8};_cge [30]=code {Code :3<<8,BitsWritten :8};_cge [31]=code {Code :26<<8,BitsWritten :8};
_cge [32]=code {Code :27<<8,BitsWritten :8};_cge [33]=code {Code :18<<8,BitsWritten :8};_cge [34]=code {Code :19<<8,BitsWritten :8};_cge [35]=code {Code :20<<8,BitsWritten :8};_cge [36]=code {Code :21<<8,BitsWritten :8};_cge [37]=code {Code :22<<8,BitsWritten :8};
_cge [38]=code {Code :23<<8,BitsWritten :8};_cge [39]=code {Code :40<<8,BitsWritten :8};_cge [40]=code {Code :41<<8,BitsWritten :8};_cge [41]=code {Code :42<<8,BitsWritten :8};_cge [42]=code {Code :43<<8,BitsWritten :8};_cge [43]=code {Code :44<<8,BitsWritten :8};
_cge [44]=code {Code :45<<8,BitsWritten :8};_cge [45]=code {Code :4<<8,BitsWritten :8};_cge [46]=code {Code :5<<8,BitsWritten :8};_cge [47]=code {Code :10<<8,BitsWritten :8};_cge [48]=code {Code :11<<8,BitsWritten :8};_cge [49]=code {Code :82<<8,BitsWritten :8};
_cge [50]=code {Code :83<<8,BitsWritten :8};_cge [51]=code {Code :84<<8,BitsWritten :8};_cge [52]=code {Code :85<<8,BitsWritten :8};_cge [53]=code {Code :36<<8,BitsWritten :8};_cge [54]=code {Code :37<<8,BitsWritten :8};_cge [55]=code {Code :88<<8,BitsWritten :8};
_cge [56]=code {Code :89<<8,BitsWritten :8};_cge [57]=code {Code :90<<8,BitsWritten :8};_cge [58]=code {Code :91<<8,BitsWritten :8};_cge [59]=code {Code :74<<8,BitsWritten :8};_cge [60]=code {Code :75<<8,BitsWritten :8};_cge [61]=code {Code :50<<8,BitsWritten :8};
_cge [62]=code {Code :51<<8,BitsWritten :8};_cge [63]=code {Code :52<<8,BitsWritten :8};_ga =make (map[int ]code );_ga [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ga [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ga [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_ga [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ga [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ga [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ga [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ga [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ga [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_ga [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ga [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ga [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ga [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ga [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ga [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_ga [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ga [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ga [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ga [1216]=code {Code :119<<3,BitsWritten :13};_ga [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ga [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_ga [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ga [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ga [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ga [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ga [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_ga [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_efec =make (map[int ]code );_efec [64]=code {Code :27<<(3+8),BitsWritten :5};_efec [128]=code {Code :18<<(3+8),BitsWritten :5};_efec [192]=code {Code :23<<(2+8),BitsWritten :6};_efec [256]=code {Code :55<<(1+8),BitsWritten :7};
_efec [320]=code {Code :54<<8,BitsWritten :8};_efec [384]=code {Code :55<<8,BitsWritten :8};_efec [448]=code {Code :100<<8,BitsWritten :8};_efec [512]=code {Code :101<<8,BitsWritten :8};_efec [576]=code {Code :104<<8,BitsWritten :8};_efec [640]=code {Code :103<<8,BitsWritten :8};
_efec [704]=code {Code :102<<8,BitsWritten :9};_efec [768]=code {Code :102<<8|1<<7,BitsWritten :9};_efec [832]=code {Code :105<<8,BitsWritten :9};_efec [896]=code {Code :105<<8|1<<7,BitsWritten :9};_efec [960]=code {Code :106<<8,BitsWritten :9};_efec [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_efec [1088]=code {Code :107<<8,BitsWritten :9};_efec [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_efec [1216]=code {Code :108<<8,BitsWritten :9};_efec [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_efec [1344]=code {Code :109<<8,BitsWritten :9};_efec [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_efec [1472]=code {Code :76<<8,BitsWritten :9};_efec [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_efec [1600]=code {Code :77<<8,BitsWritten :9};_efec [1664]=code {Code :24<<(2+8),BitsWritten :6};_efec [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_cae =make (map[int ]code );
_cae [1792]=code {Code :1<<8,BitsWritten :11};_cae [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cae [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cae [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cae [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_cae [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_cae [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cae [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cae [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cae [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_cae [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_cae [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cae [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bdb =make (map[int ]byte );_bdb [0]=0xFF;_bdb [1]=0xFE;_bdb [2]=0xFC;_bdb [3]=0xF8;_bdb [4]=0xF0;_bdb [5]=0xE0;_bdb [6]=0xC0;_bdb [7]=0x80;_bdb [8]=0x00;
};func (_agg *Encoder )Encode (pixels [][]byte )[]byte {if _agg .BlackIs1 {_cff =0;_fdd =1;}else {_cff =1;_fdd =0;};if _agg .K ==0{return _agg .encodeG31D (pixels );};if _agg .K > 0{return _agg .encodeG32D (pixels );};if _agg .K < 0{return _agg .encodeG4 (pixels );
};return nil ;};func _daag (_aba []byte ,_fdf int ,_edgf code )([]byte ,int ){_dged :=0;for _dged < _edgf .BitsWritten {_bcd :=_fdf /8;_gfcd :=_fdf %8;if _bcd >=len (_aba ){_aba =append (_aba ,0);};_bfb :=8-_gfcd ;_ebgd :=_edgf .BitsWritten -_dged ;if _bfb > _ebgd {_bfb =_ebgd ;
};if _dged < 8{_aba [_bcd ]=_aba [_bcd ]|byte (_edgf .Code >>uint (8+_gfcd -_dged ))&_bdb [8-_bfb -_gfcd ];}else {_aba [_bcd ]=_aba [_bcd ]|(byte (_edgf .Code <<uint (_dged -8))&_bdb [8-_bfb ])>>uint (_gfcd );};_fdf +=_bfb ;_dged +=_bfb ;};return _aba ,_fdf ;
};type treeNode struct{_fecd *treeNode ;_bdbga *treeNode ;_gbb int ;_cafg bool ;_dgggc bool ;};var (_ef *treeNode ;_b *treeNode ;_g *tree ;_edg *tree ;_fe *tree ;_fa *tree ;_a =-2000;_da =-1000;_gc =-3000;_efe =-4000;);func (_gbg *Encoder )appendEncodedRow (_bdd ,_aae []byte ,_bce int )[]byte {if len (_bdd )> 0&&_bce !=0&&!_gbg .EncodedByteAlign {_bdd [len (_bdd )-1]=_bdd [len (_bdd )-1]|_aae [0];
_bdd =append (_bdd ,_aae [1:]...);}else {_bdd =append (_bdd ,_aae ...);};return _bdd ;};func (_cb *Decoder )fetch ()error {if _cb ._gaf ==-1{return nil ;};if _cb ._dcg < _cb ._gaf {return nil ;};_cb ._gaf =0;_bb :=_cb .decodeRow ();if _bb !=nil {if !_e .Is (_bb ,_f .EOF ){return _bb ;
};if _cb ._gaf !=0{return _bb ;};_cb ._gaf =-1;};_cb ._dcg =0;return nil ;};func (_gac *Decoder )decodeRowType6 ()error {if _gac ._dae {_gac ._dbb .Align ();};if _gac ._ggaf {_gac ._dbb .Mark ();_ge ,_dec :=_gac .tryFetchEOL ();if _dec !=nil {return _dec ;
};if _ge {_ge ,_dec =_gac .tryFetchEOL ();if _dec !=nil {return _dec ;};if _ge {return _f .EOF ;};};_gac ._dbb .Reset ();};return _gac .decode2D ();};func _ggef (_gda int )([]byte ,int ){var _gcbd []byte ;for _cffa :=0;_cffa < 2;_cffa ++{_gcbd ,_gda =_daag (_gcbd ,_gda ,_deb );
};return _gcbd ,_gda %8;};func (_cbe *tree )fillWithNode (_fbad ,_fbd int ,_fec *treeNode )error {_gcd :=_cbe ._bffe ;for _bbb :=0;_bbb < _fbad ;_bbb ++{_beaa :=uint (_fbad -1-_bbb );_bcbb :=((_fbd >>_beaa )&1)!=0;_gff :=_gcd .walk (_bcbb );if _gff !=nil {if _gff ._dgggc {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_gcd =_gff ;continue ;};if _bbb ==_fbad -1{_gff =_fec ;}else {_gff =&treeNode {};};if _fbd ==0{_gff ._cafg =true ;};_gcd .set (_bcbb ,_gff );_gcd =_gff ;};return nil ;};func _gbc (_bgad []byte ,_cgbc ,_dggc ,_ccga int )([]byte ,int ){_ged :=_baf (_dggc ,_ccga );
_bgad ,_cgbc =_daag (_bgad ,_cgbc ,_ged );return _bgad ,_cgbc ;};type tiffType int ;type code struct{Code uint16 ;BitsWritten int ;};func (_ecfc *treeNode )walk (_bbd bool )*treeNode {if _bbd {return _ecfc ._bdbga ;};return _ecfc ._fecd ;};func (_bfa *Decoder )getNextChangingElement (_eaa int ,_abd bool )int {_gfbf :=0;
if !_abd {_gfbf =1;};_ffae :=int (uint32 (_bfa ._bcb )&0xFFFFFFFE)+_gfbf ;if _ffae > 2{_ffae -=2;};if _eaa ==0{return _ffae ;};for _cdf :=_ffae ;_cdf < _bfa ._bdc ;_cdf +=2{if _eaa < _bfa ._cgb [_cdf ]{_bfa ._bcb =_cdf ;return _cdf ;};};return -1;};func _dfb (_adag int )([]byte ,int ){var _fb []byte ;
for _fdgc :=0;_fdgc < 6;_fdgc ++{_fb ,_adag =_daag (_fb ,_adag ,_deb );};return _fb ,_adag %8;};func (_bgg *Decoder )tryFetchEOL ()(bool ,error ){_efbb ,_cdc :=_bgg ._dbb .ReadBits (12);if _cdc !=nil {return false ,_cdc ;};return _efbb ==0x1,nil ;};func (_bcgf *Decoder )Read (in []byte )(int ,error ){if _bcgf ._aecd !=nil {return 0,_bcgf ._aecd ;
};_df :=len (in );var (_befd int ;_bff int ;);for _df !=0{if _bcgf ._dcg >=_bcgf ._gaf {if _cgg :=_bcgf .fetch ();_cgg !=nil {_bcgf ._aecd =_cgg ;return 0,_cgg ;};};if _bcgf ._gaf ==-1{return _befd ,_f .EOF ;};switch {case _df <=_bcgf ._gaf -_bcgf ._dcg :_dee :=_bcgf ._efd [_bcgf ._dcg :_bcgf ._dcg +_df ];
for _ ,_fgb :=range _dee {if !_bcgf ._gga {_fgb =^_fgb ;};in [_bff ]=_fgb ;_bff ++;};_befd +=len (_dee );_bcgf ._dcg +=len (_dee );return _befd ,nil ;default:_eegg :=_bcgf ._efd [_bcgf ._dcg :];for _ ,_eff :=range _eegg {if !_bcgf ._gga {_eff =^_eff ;};
in [_bff ]=_eff ;_bff ++;};_befd +=len (_eegg );_bcgf ._dcg +=len (_eegg );_df -=len (_eegg );};};return _befd ,nil ;};func (_dad *Decoder )decodeRowType4 ()error {if !_dad ._cf {return _dad .decoderRowType41D ();};if _dad ._dae {_dad ._dbb .Align ();};
_dad ._dbb .Mark ();_gdd ,_ebg :=_dad .tryFetchEOL ();if _ebg !=nil {return _ebg ;};if !_gdd &&_dad ._ebc {_dad ._cab ++;if _dad ._cab > _dad ._bcg {return _fgc ;};_dad ._dbb .Reset ();};if !_gdd {_dad ._dbb .Reset ();};_eeba ,_ebg :=_dad ._dbb .ReadBool ();
if _ebg !=nil {return _ebg ;};if _eeba {if _gdd &&_dad ._ggaf {if _ebg =_dad .tryFetchRTC2D ();_ebg !=nil {return _ebg ;};};_ebg =_dad .decode1D ();}else {_ebg =_dad .decode2D ();};if _ebg !=nil {return _ebg ;};return nil ;};func (_ecf *Decoder )decodeRun (_aeg *tree )(int ,error ){var _aee int ;
_bge :=_aeg ._bffe ;for {_adc ,_bga :=_ecf ._dbb .ReadBool ();if _bga !=nil {return 0,_bga ;};_bge =_bge .walk (_adc );if _bge ==nil {return 0,_e .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _bge ._dgggc {_aee +=_bge ._gbb ;switch {case _bge ._gbb >=64:_bge =_aeg ._bffe ;case _bge ._gbb >=0:return _aee ,nil ;default:return _ecf ._bg ,nil ;};};};};func (_cbb *Decoder )decodeRowType2 ()error {if _cbb ._dae {_cbb ._dbb .Align ();};if _dgc :=_cbb .decode1D ();
_dgc !=nil {return _dgc ;};return nil ;};var (_cff byte =1;_fdd byte =0;);const (_ tiffType =iota ;_bdbg ;_faa ;_def ;);func _deab (_fba []byte ,_ddf int )([]byte ,int ){return _daag (_fba ,_ddf ,_eb )};type tree struct{_bffe *treeNode };func (_gdde *Decoder )decodeG32D ()error {_gdde ._bdc =_gdde ._aec ;
_gdde ._aad ,_gdde ._cgb =_gdde ._cgb ,_gdde ._aad ;_dff :=true ;var (_bfc bool ;_cgbf int ;_ffa error ;);_gdde ._aec =0;_aaae :for _cgbf < _gdde ._bg {_cbg :=_fa ._bffe ;for {_bfc ,_ffa =_gdde ._dbb .ReadBool ();if _ffa !=nil {return _ffa ;};_cbg =_cbg .walk (_bfc );
if _cbg ==nil {continue _aaae ;};if !_cbg ._dgggc {continue ;};switch _cbg ._gbb {case _efe :var _ec int ;if _dff {_ec ,_ffa =_gdde .decodeRun (_edg );}else {_ec ,_ffa =_gdde .decodeRun (_g );};if _ffa !=nil {return _ffa ;};_cgbf +=_ec ;_gdde ._aad [_gdde ._aec ]=_cgbf ;
_gdde ._aec ++;if _dff {_ec ,_ffa =_gdde .decodeRun (_g );}else {_ec ,_ffa =_gdde .decodeRun (_edg );};if _ffa !=nil {return _ffa ;};_cgbf +=_ec ;_gdde ._aad [_gdde ._aec ]=_cgbf ;_gdde ._aec ++;case _gc :_caa :=_gdde .getNextChangingElement (_cgbf ,_dff )+1;
if _caa >=_gdde ._bdc {_cgbf =_gdde ._bg ;}else {_cgbf =_gdde ._cgb [_caa ];};default:_bcf :=_gdde .getNextChangingElement (_cgbf ,_dff );if _bcf >=_gdde ._bdc ||_bcf ==-1{_cgbf =_gdde ._bg +_cbg ._gbb ;}else {_cgbf =_gdde ._cgb [_bcf ]+_cbg ._gbb ;};_gdde ._aad [_gdde ._aec ]=_cgbf ;
_gdde ._aec ++;_dff =!_dff ;};continue _aaae ;};};return nil ;};func (_ecfb *Decoder )tryFetchEOL1 ()(bool ,error ){_fge ,_bgb :=_ecfb ._dbb .ReadBits (13);if _bgb !=nil {return false ,_bgb ;};return _fge ==0x3,nil ;};func _bedd (_acf []byte ,_ecd int ,_aeeg int ,_ccc bool )([]byte ,int ){var (_feec code ;
_cca bool ;);for !_cca {_feec ,_aeeg ,_cca =_cbcd (_aeeg ,_ccc );_acf ,_ecd =_daag (_acf ,_ecd ,_feec );};return _acf ,_ecd ;};var _af =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_daa *Decoder )decodeRow ()(_cbc error ){if !_daa ._ggaf &&_daa ._ac > 0&&_daa ._ac ==_daa ._ea {return _f .EOF ;};switch _daa ._eeb {case _bdbg :_cbc =_daa .decodeRowType2 ();case _faa :_cbc =_daa .decodeRowType4 ();case _def :_cbc =_daa .decodeRowType6 ();
};if _cbc !=nil {return _cbc ;};_ccg :=0;_efa :=true ;_daa ._bcb =0;for _dgd :=0;_dgd < _daa ._aec ;_dgd ++{_acg :=_daa ._bg ;if _dgd !=_daa ._aec {_acg =_daa ._aad [_dgd ];};if _acg > _daa ._bg {_acg =_daa ._bg ;};_fce :=_ccg /8;for _ccg %8!=0&&_acg -_ccg > 0{var _dbbc byte ;
if !_efa {_dbbc =1<<uint (7-(_ccg %8));};_daa ._efd [_fce ]|=_dbbc ;_ccg ++;};if _ccg %8==0{_fce =_ccg /8;var _fgg byte ;if !_efa {_fgg =0xff;};for _acg -_ccg > 7{_daa ._efd [_fce ]=_fgg ;_ccg +=8;_fce ++;};};for _acg -_ccg > 0{if _ccg %8==0{_daa ._efd [_fce ]=0;
};var _ade byte ;if !_efa {_ade =1<<uint (7-(_ccg %8));};_daa ._efd [_fce ]|=_ade ;_ccg ++;};_efa =!_efa ;};if _ccg !=_daa ._bg {return _e .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_daa ._gaf =(_ccg +7)/8;_daa ._ea ++;return nil ;};func _cbcd (_dgf int ,_fgcc bool )(code ,int ,bool ){if _dgf < 64{if _fgcc {return _cge [_dgf ],0,true ;};return _ae [_dgf ],0,true ;};_aggg :=_dgf /64;if _aggg > 40{return _cae [2560],_dgf -2560,false ;
};if _aggg > 27{return _cae [_aggg *64],_dgf -_aggg *64,false ;};if _fgcc {return _efec [_aggg *64],_dgf -_aggg *64,false ;};return _ga [_aggg *64],_dgf -_aggg *64,false ;};var _bef =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _dagd (_dfea ,_fae []byte ,_eca int )int {_egd :=_dgdf (_fae ,_eca );if _egd < len (_fae )&&(_eca ==-1&&_fae [_egd ]==_cff ||_eca >=0&&_eca < len (_dfea )&&_dfea [_eca ]==_fae [_egd ]||_eca >=len (_dfea )&&_dfea [_eca -1]!=_fae [_egd ]){_egd =_dgdf (_fae ,_egd );
};return _egd ;};func _dgdf (_age []byte ,_cba int )int {if _cba >=len (_age ){return _cba ;};if _cba < -1{_cba =-1;};var _fgcb byte ;if _cba > -1{_fgcb =_age [_cba ];}else {_fgcb =_cff ;};_dgcf :=_cba +1;for _dgcf < len (_age ){if _age [_dgcf ]!=_fgcb {break ;
};_dgcf ++;};return _dgcf ;};var _bd =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_ebf *Decoder )tryFetchRTC2D ()(_cbcb error ){_ebf ._dbb .Mark ();var _gaag bool ;for _edb :=0;_edb < 5;_edb ++{_gaag ,_cbcb =_ebf .tryFetchEOL1 ();if _cbcb !=nil {if _e .Is (_cbcb ,_f .EOF ){if _edb ==0{break ;};return _gce ;};};if _gaag {continue ;
};if _edb > 0{return _gce ;};break ;};if _gaag {return _f .EOF ;};_ebf ._dbb .Reset ();return _cbcb ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fcgb :=&Decoder {_dbb :_d .NewReader (data ),_bg :options .Columns ,_ac :options .Rows ,_bcg :options .DamagedRowsBeforeError ,_efd :make ([]byte ,(options .Columns +7)/8),_cgb :make ([]int ,options .Columns +2),_aad :make ([]int ,options .Columns +2),_dae :options .EncodedByteAligned ,_gga :options .BlackIsOne ,_ebc :options .EndOfLine ,_ggaf :options .EndOfBlock };
switch {case options .K ==0:_fcgb ._eeb =_faa ;if len (data )< 20{return nil ,_e .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_gge :=data [:20];if _gge [0]!=0||(_gge [1]>>4!=1&&_gge [1]!=1){_fcgb ._eeb =_bdbg ;
_gd :=(uint16 (_gge [0])<<8+uint16 (_gge [1]&0xff))>>4;for _gfe :=12;_gfe < 160;_gfe ++{_gd =(_gd <<1)+uint16 ((_gge [_gfe /8]>>uint16 (7-(_gfe %8)))&0x01);if _gd &0xfff==1{_fcgb ._eeb =_faa ;break ;};};};case options .K < 0:_fcgb ._eeb =_def ;case options .K > 0:_fcgb ._eeb =_faa ;
_fcgb ._cf =true ;};switch _fcgb ._eeb {case _bdbg ,_faa ,_def :default:return nil ,_e .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _fcgb ,nil ;};func _cbgb (_ffee []byte ,_fed bool ,_ffef int )(int ,int ){_ceg :=0;for _ffef < len (_ffee ){if _fed {if _ffee [_ffef ]!=_cff {break ;};}else {if _ffee [_ffef ]!=_fdd {break ;};};_ceg ++;_ffef ++;};return _ceg ,_ffef ;};type Encoder struct{K int ;
EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_efb *Decoder )decode2D ()error {_efb ._bdc =_efb ._aec ;_efb ._aad ,_efb ._cgb =_efb ._cgb ,_efb ._aad ;_bea :=true ;var (_gba bool ;
_fgca int ;_gaa error ;);_efb ._aec =0;_adf :for _fgca < _efb ._bg {_dba :=_fa ._bffe ;for {_gba ,_gaa =_efb ._dbb .ReadBool ();if _gaa !=nil {return _gaa ;};_dba =_dba .walk (_gba );if _dba ==nil {continue _adf ;};if !_dba ._dgggc {continue ;};switch _dba ._gbb {case _efe :var _ggc int ;
if _bea {_ggc ,_gaa =_efb .decodeRun (_edg );}else {_ggc ,_gaa =_efb .decodeRun (_g );};if _gaa !=nil {return _gaa ;};_fgca +=_ggc ;_efb ._aad [_efb ._aec ]=_fgca ;_efb ._aec ++;if _bea {_ggc ,_gaa =_efb .decodeRun (_g );}else {_ggc ,_gaa =_efb .decodeRun (_edg );
};if _gaa !=nil {return _gaa ;};_fgca +=_ggc ;_efb ._aad [_efb ._aec ]=_fgca ;_efb ._aec ++;case _gc :_ab :=_efb .getNextChangingElement (_fgca ,_bea )+1;if _ab >=_efb ._bdc {_fgca =_efb ._bg ;}else {_fgca =_efb ._cgb [_ab ];};default:_afc :=_efb .getNextChangingElement (_fgca ,_bea );
if _afc >=_efb ._bdc ||_afc ==-1{_fgca =_efb ._bg +_dba ._gbb ;}else {_fgca =_efb ._cgb [_afc ]+_dba ._gbb ;};_efb ._aad [_efb ._aec ]=_fgca ;_efb ._aec ++;_bea =!_bea ;};continue _adf ;};};return nil ;};func (_eded *Decoder )decode1D ()error {var (_bee int ;
_gcea error ;);_cbf :=true ;_eded ._aec =0;for {var _eee int ;if _cbf {_eee ,_gcea =_eded .decodeRun (_edg );}else {_eee ,_gcea =_eded .decodeRun (_g );};if _gcea !=nil {return _gcea ;};_bee +=_eee ;_eded ._aad [_eded ._aec ]=_bee ;_eded ._aec ++;_cbf =!_cbf ;
if _bee >=_eded ._bg {break ;};};return nil ;};func _gddg (_gcb int )([]byte ,int ){var _gbd []byte ;for _dggb :=0;_dggb < 6;_dggb ++{_gbd ,_gcb =_daag (_gbd ,_gcb ,_dag );};return _gbd ,_gcb %8;};func (_defg tiffType )String ()string {switch _defg {case _bdbg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _faa :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _def :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _cfb (_fgcce ,_beda []byte ,_agc ,_edd ,_fbab int )([]byte ,int ,int ){_gcba :=_dgdf (_fgcce ,_fbab );
_fdef :=_edd >=0&&_fgcce [_edd ]==_cff ||_edd ==-1;_beda ,_agc =_daag (_beda ,_agc ,_ag );var _dabf int ;if _edd > -1{_dabf =_fbab -_edd ;}else {_dabf =_fbab -_edd -1;};_beda ,_agc =_bedd (_beda ,_agc ,_dabf ,_fdef );_fdef =!_fdef ;_gdc :=_gcba -_fbab ;
_beda ,_agc =_bedd (_beda ,_agc ,_gdc ,_fdef );_edd =_gcba ;return _beda ,_agc ,_edd ;};func (_adad *Encoder )encodeG32D (_bbe [][]byte )[]byte {var _ffe []byte ;var _dcb int ;for _ggg :=0;_ggg < len (_bbe );_ggg +=_adad .K {if _adad .Rows > 0&&!_adad .EndOfBlock &&_ggg ==_adad .Rows {break ;
};_affb ,_fac :=_dffe (_bbe [_ggg ],_dcb ,_dag );_ffe =_adad .appendEncodedRow (_ffe ,_affb ,_dcb );if _adad .EncodedByteAlign {_fac =0;};_dcb =_fac ;for _dfe :=_ggg +1;_dfe < (_ggg +_adad .K )&&_dfe < len (_bbe );_dfe ++{if _adad .Rows > 0&&!_adad .EndOfBlock &&_dfe ==_adad .Rows {break ;
};_gcae ,_fggb :=_daag (nil ,_dcb ,_cc );var _dea ,_dgg ,_fcae int ;_ecfd :=-1;for _ecfd < len (_bbe [_dfe ]){_dea =_dgdf (_bbe [_dfe ],_ecfd );_dgg =_dagd (_bbe [_dfe ],_bbe [_dfe -1],_ecfd );_fcae =_dgdf (_bbe [_dfe -1],_dgg );if _fcae < _dea {_gcae ,_fggb =_deab (_gcae ,_fggb );
_ecfd =_fcae ;}else {if _ed .Abs (float64 (_dgg -_dea ))> 3{_gcae ,_fggb ,_ecfd =_cfb (_bbe [_dfe ],_gcae ,_fggb ,_ecfd ,_dea );}else {_gcae ,_fggb =_gbc (_gcae ,_fggb ,_dea ,_dgg );_ecfd =_dea ;};};};_ffe =_adad .appendEncodedRow (_ffe ,_gcae ,_dcb );
if _adad .EncodedByteAlign {_fggb =0;};_dcb =_fggb %8;};};if _adad .EndOfBlock {_dgbd ,_ :=_gddg (_dcb );_ffe =_adad .appendEncodedRow (_ffe ,_dgbd ,_dcb );};return _ffe ;};func (_facf *treeNode )set (_ggd bool ,_dbec *treeNode ){if !_ggd {_facf ._fecd =_dbec ;
}else {_facf ._bdbga =_dbec ;};};func (_efde *Encoder )encodeG4 (_gfc [][]byte )[]byte {_dfc :=make ([][]byte ,len (_gfc ));copy (_dfc ,_gfc );_dfc =_eae (_dfc );var _cda []byte ;var _feg int ;for _dge :=1;_dge < len (_dfc );_dge ++{if _efde .Rows > 0&&!_efde .EndOfBlock &&_dge ==(_efde .Rows +1){break ;
};var _aaf []byte ;var _dbe ,_dab ,_caf int ;_dggg :=_feg ;_egb :=-1;for _egb < len (_dfc [_dge ]){_dbe =_dgdf (_dfc [_dge ],_egb );_dab =_dagd (_dfc [_dge ],_dfc [_dge -1],_egb );_caf =_dgdf (_dfc [_dge -1],_dab );if _caf < _dbe {_aaf ,_dggg =_daag (_aaf ,_dggg ,_eb );
_egb =_caf ;}else {if _ed .Abs (float64 (_dab -_dbe ))> 3{_aaf ,_dggg ,_egb =_cfb (_dfc [_dge ],_aaf ,_dggg ,_egb ,_dbe );}else {_aaf ,_dggg =_gbc (_aaf ,_dggg ,_dbe ,_dab );_egb =_dbe ;};};};_cda =_efde .appendEncodedRow (_cda ,_aaf ,_feg );if _efde .EncodedByteAlign {_dggg =0;
};_feg =_dggg %8;};if _efde .EndOfBlock {_ded ,_ :=_ggef (_feg );_cda =_efde .appendEncodedRow (_cda ,_ded ,_feg );};return _cda ;};func _baf (_gdf ,_bdg int )code {var _dfa code ;switch _bdg -_gdf {case -1:_dfa =_ede ;case -2:_dfa =_fee ;case -3:_dfa =_fd ;
case 0:_dfa =_aab ;case 1:_dfa =_edf ;case 2:_dfa =_gca ;case 3:_dfa =_db ;};return _dfa ;};func (_ddb *Encoder )encodeG31D (_eda [][]byte )[]byte {var _defc []byte ;_bfad :=0;for _agge :=range _eda {if _ddb .Rows > 0&&!_ddb .EndOfBlock &&_agge ==_ddb .Rows {break ;
};_cbfc ,_dgb :=_dffe (_eda [_agge ],_bfad ,_deb );_defc =_ddb .appendEncodedRow (_defc ,_cbfc ,_bfad );if _ddb .EncodedByteAlign {_dgb =0;};_bfad =_dgb ;};if _ddb .EndOfBlock {_ccf ,_ :=_dfb (_bfad );_defc =_ddb .appendEncodedRow (_defc ,_ccf ,_bfad );
};return _defc ;};var _fg =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
type Decoder struct{_bg int ;_ac int ;_ea int ;_efd []byte ;_bcg int ;_cf bool ;_gfb bool ;_aef bool ;_gga bool ;_ebc bool ;_ggaf bool ;_dae bool ;_gaf int ;_dcg int ;_cgb []int ;_aad []int ;_bdc int ;_aec int ;_cab int ;_bcb int ;_dbb *_d .Reader ;_eeb tiffType ;
_aecd error ;};func (_cfe *Decoder )looseFetchEOL ()(bool ,error ){_ccb ,_aff :=_cfe ._dbb .ReadBits (12);if _aff !=nil {return false ,_aff ;};switch _ccb {case 0x1:return true ,nil ;case 0x0:for {_fdg ,_dd :=_cfe ._dbb .ReadBool ();if _dd !=nil {return false ,_dd ;
};if _fdg {return true ,nil ;};};default:return false ,nil ;};};func _eae (_eed [][]byte )[][]byte {_acgd :=make ([]byte ,len (_eed [0]));for _dcd :=range _acgd {_acgd [_dcd ]=_cff ;};_eed =append (_eed ,[]byte {});for _fdec :=len (_eed )-1;_fdec > 0;_fdec --{_eed [_fdec ]=_eed [_fdec -1];
};_eed [0]=_acgd ;return _eed ;};