//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_fe "fmt";_d "golang/unipdf/common";_ef "golang/unipdf/internal/bitwise";_dd "golang/unipdf/internal/jbig2/internal";_e "io";_c "strings";);func (_ce *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_dg int ;
_dfc =_b [stats .cx ()][0];_ea =int32 (stats .cx ()););defer func (){_ce ._df ++}();_ce ._g -=_dfc ;if (_ce ._eb >>16)< uint64 (_dfc ){_dg =_ce .lpsExchange (stats ,_ea ,_dfc );if _de :=_ce .renormalize ();_de !=nil {return 0,_de ;};}else {_ce ._eb -=uint64 (_dfc )<<16;
if (_ce ._g &0x8000)==0{_dg =_ce .mpsExchange (stats ,_ea );if _be :=_ce .renormalize ();_be !=nil {return 0,_be ;};}else {_dg =int (stats .getMps ());};};return _dg ,nil ;};func (_eag *Decoder )readByte ()error {if _eag ._cb .AbsolutePosition ()> _eag ._ee {if _ ,_bfb :=_eag ._cb .Seek (-1,_e .SeekCurrent );
_bfb !=nil {return _bfb ;};};_ac ,_gf :=_eag ._cb .ReadByte ();if _gf !=nil {return _gf ;};_eag ._cg =_ac ;if _eag ._cg ==0xFF{_afc ,_bd :=_eag ._cb .ReadByte ();if _bd !=nil {return _bd ;};if _afc > 0x8F{_eag ._eb +=0xFF00;_eag ._db =8;if _ ,_gd :=_eag ._cb .Seek (-2,_e .SeekCurrent );
_gd !=nil {return _gd ;};}else {_eag ._eb +=uint64 (_afc )<<9;_eag ._db =7;};}else {_ac ,_gf =_eag ._cb .ReadByte ();if _gf !=nil {return _gf ;};_eag ._cg =_ac ;_eag ._eb +=uint64 (_eag ._cg )<<8;_eag ._db =8;};_eag ._eb &=0xFFFFFFFFFF;return nil ;};func (_ceb *DecoderStats )Copy ()*DecoderStats {_cgab :=&DecoderStats {_ddb :_ceb ._ddb ,_fc :make ([]byte ,_ceb ._ddb )};
copy (_cgab ._fc ,_ceb ._fc );return _cgab ;};var (_b =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_cb *_ef .Reader ;_cg uint8 ;_eb uint64 ;_g uint32 ;_ca int64 ;_db int32 ;_df int32 ;_ee int64 ;};func (_bga *DecoderStats )cx ()byte {return _bga ._fc [_bga ._ecd ]};func (_cc *Decoder )init ()error {_cc ._ee =_cc ._cb .AbsolutePosition ();
_aa ,_af :=_cc ._cb .ReadByte ();if _af !=nil {_d .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_af );return _af ;};_cc ._cg =_aa ;_cc ._eb =uint64 (_aa )<<16;
if _af =_cc .readByte ();_af !=nil {return _af ;};_cc ._eb <<=7;_cc ._db -=7;_cc ._g =0x8000;_cc ._df ++;return nil ;};func (_cba *DecoderStats )setEntry (_gad int ){_ded :=byte (_gad &0x7f);_cba ._fc [_cba ._ecd ]=_ded };func (_gae *DecoderStats )getMps ()byte {return _gae ._feb [_gae ._ecd ]};
func (_ade *DecoderStats )Overwrite (dNew *DecoderStats ){for _afa :=0;_afa < len (_ade ._fc );_afa ++{_ade ._fc [_afa ]=dNew ._fc [_afa ];_ade ._feb [_afa ]=dNew ._feb [_afa ];};};func (_cde *DecoderStats )SetIndex (index int32 ){_cde ._ecd =index };func (_fb *Decoder )decodeIntBit (_agb *DecoderStats )(int ,error ){_agb .SetIndex (int32 (_fb ._ca ));
_bb ,_aea :=_fb .DecodeBit (_agb );if _aea !=nil {_d .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_aea );
return _bb ,_aea ;};if _fb ._ca < 256{_fb ._ca =((_fb ._ca <<uint64 (1))|int64 (_bb ))&0x1ff;}else {_fb ._ca =(((_fb ._ca <<uint64 (1)|int64 (_bb ))&511)|256)&0x1ff;};return _bb ,nil ;};func (_bgc *Decoder )lpsExchange (_bae *DecoderStats ,_ec int32 ,_cga uint32 )int {_gcb :=_bae .getMps ();
if _bgc ._g < _cga {_bae .setEntry (int (_b [_ec ][1]));_bgc ._g =_cga ;return int (_gcb );};if _b [_ec ][3]==1{_bae .toggleMps ();};_bae .setEntry (int (_b [_ec ][2]));_bgc ._g =_cga ;return int (1-_gcb );};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ecd :index ,_ddb :contextSize ,_fc :make ([]byte ,contextSize ),_feb :make ([]byte ,contextSize )};
};func (_ge *DecoderStats )String ()string {_bdc :=&_c .Builder {};_bdc .WriteString (_fe .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ge ._fc )));for _eg ,_cbg :=range _ge ._fc {if _cbg !=0{_bdc .WriteString (_fe .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_eg ,_cbg ));
};};return _bdc .String ();};func (_ag *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ag ._ca =1;var _bg uint64 ;for _bg =0;_bg < codeLen ;_bg ++{stats .SetIndex (int32 (_ag ._ca ));_ae ,_dfb :=_ag .DecodeBit (stats );if _dfb !=nil {return 0,_dfb ;
};_ag ._ca =(_ag ._ca <<1)|int64 (_ae );};_ed :=_ag ._ca -(1<<codeLen );return _ed ,nil ;};func New (r *_ef .Reader )(*Decoder ,error ){_fa :=&Decoder {_cb :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _ba :=_fa .init ();
_ba !=nil {return nil ,_ba ;};return _fa ,nil ;};func (_cf *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_gc ,_bf int32 ;_eeg ,_a ,_cd int ;_ga error ;);if stats ==nil {stats =NewStats (512,1);};_cf ._ca =1;_a ,_ga =_cf .decodeIntBit (stats );
if _ga !=nil {return 0,_ga ;};_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;};if _eeg ==1{_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;};if _eeg ==1{_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;
};if _eeg ==1{_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;};if _eeg ==1{_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;};if _eeg ==1{_cd =32;_bf =4436;}else {_cd =12;_bf =340;};}else {_cd =8;_bf =84;};}else {_cd =6;
_bf =20;};}else {_cd =4;_bf =4;};}else {_cd =2;_bf =0;};for _caa :=0;_caa < _cd ;_caa ++{_eeg ,_ga =_cf .decodeIntBit (stats );if _ga !=nil {return 0,_ga ;};_gc =(_gc <<1)|int32 (_eeg );};_gc +=_bf ;if _a ==0{return _gc ,nil ;}else if _a ==1&&_gc > 0{return -_gc ,nil ;
};return 0,_dd .ErrOOB ;};func (_eaa *DecoderStats )toggleMps (){_eaa ._feb [_eaa ._ecd ]^=1};func (_ff *Decoder )mpsExchange (_gdf *DecoderStats ,_ad int32 )int {_dga :=_gdf ._feb [_gdf ._ecd ];if _ff ._g < _b [_ad ][0]{if _b [_ad ][3]==1{_gdf .toggleMps ();
};_gdf .setEntry (int (_b [_ad ][2]));return int (1-_dga );};_gdf .setEntry (int (_b [_ad ][1]));return int (_dga );};func (_gcbg *DecoderStats )Reset (){for _fab :=0;_fab < len (_gcbg ._fc );_fab ++{_gcbg ._fc [_fab ]=0;_gcbg ._feb [_fab ]=0;};};func (_bab *Decoder )renormalize ()error {for {if _bab ._db ==0{if _fd :=_bab .readByte ();
_fd !=nil {return _fd ;};};_bab ._g <<=1;_bab ._eb <<=1;_bab ._db --;if (_bab ._g &0x8000)!=0{break ;};};_bab ._eb &=0xffffffff;return nil ;};type DecoderStats struct{_ecd int32 ;_ddb int32 ;_fc []byte ;_feb []byte ;};